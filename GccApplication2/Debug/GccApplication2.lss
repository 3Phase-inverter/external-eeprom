
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001642  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001e  00800100  00800100  000016b6  2**0
                  ALLOC
  2 .stab         000006cc  00000000  00000000  000016b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00001d84  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000000a0  00000000  00000000  00001e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000002d4  00000000  00000000  00001ebb  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000948  00000000  00000000  0000218f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003d1  00000000  00000000  00002ad7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001647  00000000  00000000  00002ea8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000260  00000000  00000000  000044f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038b  00000000  00000000  00004750  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009de  00000000  00000000  00004adb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 0000008b  00000000  00000000  000054b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000018  00000000  00000000  00005544  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 03 	jmp	0x694	; 0x694 <__ctors_end>
       4:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
       8:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
       c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      10:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      14:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      18:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      1c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      20:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      24:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      28:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      2c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      30:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      34:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      38:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      3c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      40:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      44:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      48:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      4c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      50:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      54:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      58:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      5c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      60:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      64:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      68:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      6c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      70:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      74:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      78:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      7c:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      80:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      84:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>
      88:	0c 94 5c 03 	jmp	0x6b8	; 0x6b8 <__bad_interrupt>

0000008c <__c.1544>:
      8c:	45 45 50 52 4f 4d 20 77 72 69 74 65 20 64 61 74     EEPROM write dat
      9c:	61 20 66 61 69 6c 65 64 2e 2e 00                    a failed...

000000a7 <__c.1542>:
      a7:	45 45 50 52 4f 4d 20 77 72 69 74 65 2d 32 20 66     EEPROM write-2 f
      b7:	61 69 6c 65 64 2e 2e 00                             ailed...

000000bf <__c.1540>:
      bf:	45 45 50 52 4f 4d 20 77 72 69 74 65 2d 31 20 66     EEPROM write-1 f
      cf:	61 69 6c 65 64 2e 2e 00                             ailed...

000000d7 <__c.1538>:
      d7:	45 45 50 52 4f 4d 20 73 65 6e 64 41 64 64 72 65     EEPROM sendAddre
      e7:	73 73 31 20 66 61 69 6c 65 64 2e 2e 00              ss1 failed...

000000f4 <__c.1536>:
      f4:	69 32 63 20 73 74 61 72 74 20 66 61 69 6c 65 64     i2c start failed
     104:	2e 2e 00                                            ...

00000107 <__c.1534>:
     107:	57 61 69 74 2e 2e 2e 00                             Wait....

0000010f <__c.1510>:
     10f:	45 45 50 52 4f 4d 20 77 72 69 74 65 20 64 61 74     EEPROM write dat
     11f:	61 20 66 61 69 6c 65 64 2e 2e 00                    a failed...

0000012a <__c.1508>:
     12a:	45 45 50 52 4f 4d 20 77 72 69 74 65 2d 32 20 66     EEPROM write-2 f
     13a:	61 69 6c 65 64 2e 2e 00                             ailed...

00000142 <__c.1506>:
     142:	45 45 50 52 4f 4d 20 77 72 69 74 65 2d 31 20 66     EEPROM write-1 f
     152:	61 69 6c 65 64 2e 2e 00                             ailed...

0000015a <__c.1504>:
     15a:	45 45 50 52 4f 4d 20 73 65 6e 64 41 64 64 72 65     EEPROM sendAddre
     16a:	73 73 31 20 66 61 69 6c 65 64 2e 2e 00              ss1 failed...

00000177 <__c.1502>:
     177:	69 32 63 20 73 74 61 72 74 20 66 61 69 6c 65 64     i2c start failed
     187:	2e 2e 00                                            ...

0000018a <__c.1491>:
     18a:	45 45 50 52 4f 4d 20 72 65 63 65 69 76 65 20 66     EEPROM receive f
     19a:	61 69 6c 65 64 2e 2e 00                             ailed...

000001a2 <__c.1489>:
     1a2:	45 45 50 52 4f 4d 20 73 65 6e 64 41 64 64 72 65     EEPROM sendAddre
     1b2:	73 73 32 20 66 61 69 6c 65 64 2e 2e 00              ss2 failed...

000001bf <__c.1487>:
     1bf:	69 32 63 20 72 65 70 65 61 74 2d 73 74 61 72 74     i2c repeat-start
     1cf:	20 66 61 69 6c 65 64 2e 2e 00                        failed...

000001d9 <__c.1485>:
     1d9:	45 45 50 52 4f 4d 20 77 72 69 74 65 2d 32 20 66     EEPROM write-2 f
     1e9:	61 69 6c 65 64 2e 2e 00                             ailed...

000001f1 <__c.1483>:
     1f1:	45 45 50 52 4f 4d 20 77 72 69 74 65 2d 31 20 66     EEPROM write-1 f
     201:	61 69 6c 65 64 2e 2e 00                             ailed...

00000209 <__c.1481>:
     209:	45 45 50 52 4f 4d 20 73 65 6e 64 41 64 64 72 65     EEPROM sendAddre
     219:	73 73 31 20 66 61 69 6c 65 64 2e 2e 00              ss1 failed...

00000226 <__c.1479>:
     226:	69 32 63 20 73 74 61 72 74 20 66 61 69 6c 65 64     i2c start failed
     236:	2e 2e 00                                            ...

00000239 <__c.1692>:
     239:	20 46 69 6e 69 73 68 65 64 2e 2e 00                  Finished...

00000245 <__c.1690>:
     245:	20 45 45 50 52 4f 4d 20 6f 70 65 72 61 74 69 6f      EEPROM operatio
     255:	6e 20 66 61 69 6c 65 64 2e 2e 00                    n failed...

00000260 <__c.1688>:
     260:	20 49 6e 76 61 6c 69 64 20 6f 70 74 69 6f 6e 21      Invalid option!
	...

00000271 <__c.1681>:
     271:	20 45 6e 74 65 72 20 74 65 78 74 3a 20 00            Enter text: .

0000027f <__c.1679>:
     27f:	20 41 64 64 72 65 73 73 20 6f 75 74 20 6f 66 20      Address out of 
     28f:	72 61 6e 67 65 2e 2e 20 00                          range.. .

00000298 <__c.1677>:
     298:	20 45 6e 74 65 72 20 50 61 67 65 20 4e 75 6d 62      Enter Page Numb
     2a8:	65 72 20 28 30 30 30 2d 35 31 31 29 3a 20 00        er (000-511): .

000002b7 <__c.1673>:
     2b7:	20 48 6f 77 20 6d 61 6e 79 20 62 79 74 65 73 3f      How many bytes?
     2c7:	28 30 30 2d 36 34 29 3a 20 00                       (00-64): .

000002d1 <__c.1670>:
     2d1:	20 45 6e 74 65 72 20 74 65 78 74 3a 20 00            Enter text: .

000002df <__c.1666>:
     2df:	20 45 45 50 52 4f 4d 20 65 72 61 73 65 64 20 73      EEPROM erased s
     2ef:	75 63 63 65 73 73 66 75 6c 6c 79 2e 2e 00           uccessfully...

000002fd <__c.1664>:
     2fd:	20 45 45 50 52 4f 4d 20 65 72 61 73 65 20 66 61      EEPROM erase fa
     30d:	69 6c 65 64 2e 2e 00                                iled...

00000314 <__c.1661>:
     314:	3e 20 53 65 6c 65 63 74 20 4f 70 74 69 6f 6e 20     > Select Option 
     324:	28 30 2d 38 29 3a 20 00                             (0-8): .

0000032c <__c.1659>:
     32c:	3e 20 38 20 3a 20 55 70 64 61 74 65 20 52 54 43     > 8 : Update RTC
     33c:	20 54 69 6d 65 00                                    Time.

00000342 <__c.1657>:
     342:	3e 20 37 20 3a 20 55 70 64 61 74 65 20 52 54 43     > 7 : Update RTC
     352:	20 44 61 74 65 00                                    Date.

00000358 <__c.1655>:
     358:	3e 20 36 20 3a 20 44 69 73 70 6c 61 79 20 52 54     > 6 : Display RT
     368:	43 20 54 69 6d 65 00                                C Time.

0000036f <__c.1653>:
     36f:	3e 20 35 20 3a 20 44 69 73 70 6c 61 79 20 52 54     > 5 : Display RT
     37f:	43 20 44 61 74 65 00                                C Date.

00000386 <__c.1651>:
     386:	3e 20 34 20 3a 20 52 65 61 64 20 45 45 50 52 4f     > 4 : Read EEPRO
     396:	4d 20 50 61 67 65 00                                M Page.

0000039d <__c.1649>:
     39d:	3e 20 33 20 3a 20 57 72 69 74 65 20 45 45 50 52     > 3 : Write EEPR
     3ad:	4f 4d 20 50 61 67 65 00                             OM Page.

000003b5 <__c.1647>:
     3b5:	3e 20 32 20 3a 20 52 65 61 64 20 45 45 50 52 4f     > 2 : Read EEPRO
     3c5:	4d 00                                               M.

000003c7 <__c.1645>:
     3c7:	3e 20 31 20 3a 20 57 72 69 74 65 20 45 45 50 52     > 1 : Write EEPR
     3d7:	4f 4d 00                                            OM.

000003da <__c.1643>:
     3da:	3e 20 30 20 3a 20 45 72 61 73 65 20 45 45 50 52     > 0 : Erase EEPR
     3ea:	4f 4d 00                                            OM.

000003ed <__c.1641>:
     3ed:	50 72 65 73 73 20 61 6e 79 20 6b 65 79 2e 2e 00     Press any key...

000003fd <__c.1622>:
     3fd:	49 6e 76 61 6c 69 64 20 45 6e 74 72 79 2e 2e 00     Invalid Entry...

0000040d <__c.1620>:
     40d:	44 61 74 65 20 55 70 64 61 74 65 64 20 73 75 63     Date Updated suc
     41d:	65 73 73 66 75 6c 6c 79 2e 2e 00                    essfully...

00000428 <__c.1618>:
     428:	45 6e 74 65 72 20 44 61 79 20 28 53 75 6e 64 61     Enter Day (Sunda
     438:	79 3a 30 2c 20 4d 6f 6e 64 61 79 3a 31 2e 2e 2e     y:0, Monday:1...
     448:	29 20 28 30 2d 36 29 3a 00                          ) (0-6):.

00000451 <__c.1615>:
     451:	45 6e 74 65 72 20 44 61 74 65 20 28 64 64 2f 6d     Enter Date (dd/m
     461:	6d 2f 79 79 29 3a 00                                m/yy):.

00000468 <__c.1609>:
     468:	49 6e 76 61 6c 69 64 20 45 6e 74 72 79 2e 2e 00     Invalid Entry...

00000478 <__c.1607>:
     478:	54 69 6d 65 20 55 70 64 61 74 65 64 20 73 75 63     Time Updated suc
     488:	65 73 73 66 75 6c 6c 79 2e 2e 00                    essfully...

00000493 <__c.1604>:
     493:	45 6e 74 65 72 20 54 69 6d 65 20 69 6e 20 32 34     Enter Time in 24
     4a3:	68 20 66 6f 72 6d 61 74 28 68 68 3a 6d 6d 3a 73     h format(hh:mm:s
     4b3:	73 29 3a 00                                         s):.

000004b7 <__c.1595>:
     4b7:	52 54 43 20 77 72 69 74 65 20 64 61 74 65 20 66     RTC write date f
     4c7:	61 69 6c 65 64 2e 2e 00                             ailed...

000004cf <__c.1593>:
     4cf:	52 54 43 20 77 72 69 74 65 2d 31 20 66 61 69 6c     RTC write-1 fail
     4df:	65 64 2e 2e 00                                      ed...

000004e4 <__c.1591>:
     4e4:	52 54 43 20 73 65 6e 64 41 64 64 72 65 73 73 31     RTC sendAddress1
     4f4:	20 66 61 69 6c 65 64 2e 2e 00                        failed...

000004fe <__c.1589>:
     4fe:	52 54 43 20 73 74 61 72 74 31 20 66 61 69 6c 65     RTC start1 faile
     50e:	64 2e 2e 00                                         d...

00000512 <__c.1579>:
     512:	52 54 43 20 77 72 69 74 65 20 74 69 6d 65 20 66     RTC write time f
     522:	61 69 6c 65 64 2e 2e 00                             ailed...

0000052a <__c.1577>:
     52a:	52 54 43 20 77 72 69 74 65 2d 31 20 66 61 69 6c     RTC write-1 fail
     53a:	65 64 2e 2e 00                                      ed...

0000053f <__c.1575>:
     53f:	52 54 43 20 73 65 6e 64 41 64 64 72 65 73 73 31     RTC sendAddress1
     54f:	20 66 61 69 6c 65 64 2e 2e 00                        failed...

00000559 <__c.1573>:
     559:	52 54 43 20 73 74 61 72 74 31 20 66 61 69 6c 65     RTC start1 faile
     569:	64 2e 2e 00                                         d...

0000056d <__c.1563>:
     56d:	55 6e 6b 6e 6f 77 6e 00                             Unknown.

00000575 <__c.1560>:
     575:	53 61 74 75 72 64 61 79 00                          Saturday.

0000057e <__c.1557>:
     57e:	46 72 69 64 61 79 00                                Friday.

00000585 <__c.1554>:
     585:	54 68 75 72 73 64 61 79 00                          Thursday.

0000058e <__c.1551>:
     58e:	57 65 64 6e 65 73 64 61 79 00                       Wednesday.

00000598 <__c.1548>:
     598:	54 75 65 73 64 61 79 00                             Tuesday.

000005a0 <__c.1545>:
     5a0:	4d 6f 6e 64 61 79 00                                Monday.

000005a7 <__c.1541>:
     5a7:	53 75 6e 64 61 79 00                                Sunday.

000005ae <__c.1538>:
     5ae:	20 20 20 20 44 61 79 3a 20 00                           Day: .

000005b8 <__c.1533>:
     5b8:	44 61 74 65 3a 00                                   Date:.

000005be <__c.1528>:
     5be:	54 69 6d 65 3a 00                                   Time:.

000005c4 <__c.1514>:
     5c4:	52 54 43 20 72 65 63 65 69 76 65 20 66 61 69 6c     RTC receive fail
     5d4:	65 64 2e 2e 00                                      ed...

000005d9 <__c.1512>:
     5d9:	52 54 43 20 73 65 6e 64 41 64 64 72 65 73 73 32     RTC sendAddress2
     5e9:	20 66 61 69 6c 65 64 2e 2e 00                        failed...

000005f3 <__c.1510>:
     5f3:	52 54 43 20 72 65 70 65 61 74 20 73 74 61 72 74     RTC repeat start
     603:	20 66 61 69 6c 65 64 2e 2e 00                        failed...

0000060d <__c.1508>:
     60d:	52 54 43 20 77 72 69 74 65 2d 31 20 66 61 69 6c     RTC write-1 fail
     61d:	65 64 2e 2e 00                                      ed...

00000622 <__c.1506>:
     622:	52 54 43 20 73 65 6e 64 41 64 64 72 65 73 73 31     RTC sendAddress1
     632:	20 66 61 69 6c 65 64 2e 2e 00                        failed...

0000063c <__c.1504>:
     63c:	52 54 43 20 73 74 61 72 74 31 20 66 61 69 6c 65     RTC start1 faile
     64c:	64 2e 2e 00                                         d...

00000650 <__c.1496>:
     650:	52 54 43 20 77 72 69 74 65 2d 32 20 66 61 69 6c     RTC write-2 fail
     660:	65 64 2e 2e 00                                      ed...

00000665 <__c.1494>:
     665:	52 54 43 20 73 65 6e 64 41 64 64 72 65 73 73 31     RTC sendAddress1
     675:	20 66 61 69 6c 65 64 2e 2e 00                        failed...

0000067f <__c.1492>:
     67f:	52 54 43 20 73 74 61 72 74 31 20 66 61 69 6c 65     RTC start1 faile
     68f:	64 2e 2e 00 00                                      d....

00000694 <__ctors_end>:
     694:	11 24       	eor	r1, r1
     696:	1f be       	out	0x3f, r1	; 63
     698:	cf ef       	ldi	r28, 0xFF	; 255
     69a:	d0 e1       	ldi	r29, 0x10	; 16
     69c:	de bf       	out	0x3e, r29	; 62
     69e:	cd bf       	out	0x3d, r28	; 61

000006a0 <__do_clear_bss>:
     6a0:	11 e0       	ldi	r17, 0x01	; 1
     6a2:	a0 e0       	ldi	r26, 0x00	; 0
     6a4:	b1 e0       	ldi	r27, 0x01	; 1
     6a6:	01 c0       	rjmp	.+2      	; 0x6aa <.do_clear_bss_start>

000006a8 <.do_clear_bss_loop>:
     6a8:	1d 92       	st	X+, r1

000006aa <.do_clear_bss_start>:
     6aa:	ae 31       	cpi	r26, 0x1E	; 30
     6ac:	b1 07       	cpc	r27, r17
     6ae:	e1 f7       	brne	.-8      	; 0x6a8 <.do_clear_bss_loop>
     6b0:	0e 94 f5 04 	call	0x9ea	; 0x9ea <main>
     6b4:	0c 94 1f 0b 	jmp	0x163e	; 0x163e <_exit>

000006b8 <__bad_interrupt>:
     6b8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006bc <EEPROM_read>:

//******************************************************************
//Function to read given number of bytes from EEPROM 
//******************************************************************
unsigned char EEPROM_read(unsigned char highAddress, unsigned char lowAddress, unsigned char totalChar)
{
     6bc:	cf 92       	push	r12
     6be:	df 92       	push	r13
     6c0:	ff 92       	push	r15
     6c2:	0f 93       	push	r16
     6c4:	1f 93       	push	r17
     6c6:	cf 93       	push	r28
     6c8:	df 93       	push	r29
     6ca:	18 2f       	mov	r17, r24
     6cc:	06 2f       	mov	r16, r22
     6ce:	f4 2e       	mov	r15, r20
   unsigned char errorStatus, i, data;
   
   errorStatus = i2c_start();
     6d0:	0e 94 b0 06 	call	0xd60	; 0xd60 <i2c_start>
   if(errorStatus == 1)
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	41 f4       	brne	.+16     	; 0x6e8 <EEPROM_read+0x2c>
   {
     transmitString_F(PSTR("i2c start failed.."));
     6d8:	86 e2       	ldi	r24, 0x26	; 38
     6da:	92 e0       	ldi	r25, 0x02	; 2
     6dc:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
   	 i2c_stop();
     6e0:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return(1);
     6e4:	81 e0       	ldi	r24, 0x01	; 1
     6e6:	76 c0       	rjmp	.+236    	; 0x7d4 <EEPROM_read+0x118>
   } 
   
   errorStatus = i2c_sendAddress(EEPROM_W);
     6e8:	80 ea       	ldi	r24, 0xA0	; 160
     6ea:	0e 94 d0 06 	call	0xda0	; 0xda0 <i2c_sendAddress>
   
   if(errorStatus == 1)
     6ee:	81 30       	cpi	r24, 0x01	; 1
     6f0:	41 f4       	brne	.+16     	; 0x702 <EEPROM_read+0x46>
   {
     transmitString_F(PSTR("EEPROM sendAddress1 failed.."));
     6f2:	89 e0       	ldi	r24, 0x09	; 9
     6f4:	92 e0       	ldi	r25, 0x02	; 2
     6f6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	 i2c_stop();
     6fa:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return(1);
     6fe:	81 e0       	ldi	r24, 0x01	; 1
     700:	69 c0       	rjmp	.+210    	; 0x7d4 <EEPROM_read+0x118>
   } 
   
   errorStatus = i2c_sendData(highAddress);
     702:	81 2f       	mov	r24, r17
     704:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <i2c_sendData>
   if(errorStatus == 1)
     708:	81 30       	cpi	r24, 0x01	; 1
     70a:	41 f4       	brne	.+16     	; 0x71c <EEPROM_read+0x60>
   {
     transmitString_F(PSTR("EEPROM write-1 failed.."));
     70c:	81 ef       	ldi	r24, 0xF1	; 241
     70e:	91 e0       	ldi	r25, 0x01	; 1
     710:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	 i2c_stop();
     714:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return(1);
     718:	81 e0       	ldi	r24, 0x01	; 1
     71a:	5c c0       	rjmp	.+184    	; 0x7d4 <EEPROM_read+0x118>
   } 
   
 
   errorStatus = i2c_sendData(lowAddress);
     71c:	80 2f       	mov	r24, r16
     71e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <i2c_sendData>
   if(errorStatus == 1)
     722:	81 30       	cpi	r24, 0x01	; 1
     724:	41 f4       	brne	.+16     	; 0x736 <EEPROM_read+0x7a>
   {
     transmitString_F(PSTR("EEPROM write-2 failed.."));
     726:	89 ed       	ldi	r24, 0xD9	; 217
     728:	91 e0       	ldi	r25, 0x01	; 1
     72a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	 i2c_stop();
     72e:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return(1);
     732:	81 e0       	ldi	r24, 0x01	; 1
     734:	4f c0       	rjmp	.+158    	; 0x7d4 <EEPROM_read+0x118>
   } 
   
   errorStatus = i2c_repeatStart();
     736:	0e 94 c0 06 	call	0xd80	; 0xd80 <i2c_repeatStart>
   if(errorStatus == 1)
     73a:	81 30       	cpi	r24, 0x01	; 1
     73c:	41 f4       	brne	.+16     	; 0x74e <EEPROM_read+0x92>
   {
     transmitString_F(PSTR("i2c repeat-start failed.."));
     73e:	8f eb       	ldi	r24, 0xBF	; 191
     740:	91 e0       	ldi	r25, 0x01	; 1
     742:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	 i2c_stop();
     746:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return(1);
     74a:	81 e0       	ldi	r24, 0x01	; 1
     74c:	43 c0       	rjmp	.+134    	; 0x7d4 <EEPROM_read+0x118>
   } 
   
   errorStatus = i2c_sendAddress(EEPROM_R);
     74e:	81 ea       	ldi	r24, 0xA1	; 161
     750:	0e 94 d0 06 	call	0xda0	; 0xda0 <i2c_sendAddress>
   if(errorStatus == 1)
     754:	81 30       	cpi	r24, 0x01	; 1
     756:	19 f0       	breq	.+6      	; 0x75e <EEPROM_read+0xa2>
     transmitString_F(PSTR("EEPROM sendAddress2 failed.."));
	 i2c_stop();
	 return(1);
   } 
   
   for(i=0;i<totalChar;i++)
     758:	ff 20       	and	r15, r15
     75a:	49 f4       	brne	.+18     	; 0x76e <EEPROM_read+0xb2>
     75c:	32 c0       	rjmp	.+100    	; 0x7c2 <EEPROM_read+0x106>
   } 
   
   errorStatus = i2c_sendAddress(EEPROM_R);
   if(errorStatus == 1)
   {
     transmitString_F(PSTR("EEPROM sendAddress2 failed.."));
     75e:	82 ea       	ldi	r24, 0xA2	; 162
     760:	91 e0       	ldi	r25, 0x01	; 1
     762:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	 i2c_stop();
     766:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return(1);
     76a:	81 e0       	ldi	r24, 0x01	; 1
     76c:	33 c0       	rjmp	.+102    	; 0x7d4 <EEPROM_read+0x118>
   } 
   
   for(i=0;i<totalChar;i++)
     76e:	c0 e0       	ldi	r28, 0x00	; 0
     770:	d0 e0       	ldi	r29, 0x00	; 0
   {
      if(i == (totalChar-1))  	 //no Acknowledge after receiving the last byte
     772:	cf 2c       	mov	r12, r15
     774:	dd 24       	eor	r13, r13
     776:	08 94       	sec
     778:	c1 08       	sbc	r12, r1
     77a:	d1 08       	sbc	r13, r1
   errorStatus = i2c_sendAddress(EEPROM_R);
   if(errorStatus == 1)
   {
     transmitString_F(PSTR("EEPROM sendAddress2 failed.."));
	 i2c_stop();
	 return(1);
     77c:	0c 2f       	mov	r16, r28
   } 
   
   for(i=0;i<totalChar;i++)
   {
      if(i == (totalChar-1))  	 //no Acknowledge after receiving the last byte
     77e:	cc 15       	cp	r28, r12
     780:	dd 05       	cpc	r29, r13
     782:	21 f4       	brne	.+8      	; 0x78c <EEPROM_read+0xd0>
	   	  data = i2c_receiveData_NACK();
     784:	0e 94 0f 07 	call	0xe1e	; 0xe1e <i2c_receiveData_NACK>
     788:	18 2f       	mov	r17, r24
     78a:	03 c0       	rjmp	.+6      	; 0x792 <EEPROM_read+0xd6>
	  else
	  	  data = i2c_receiveData_ACK();
     78c:	0e 94 fd 06 	call	0xdfa	; 0xdfa <i2c_receiveData_ACK>
     790:	18 2f       	mov	r17, r24
		  
   	  if(data == ERROR_CODE)
     792:	1e 37       	cpi	r17, 0x7E	; 126
     794:	41 f4       	brne	.+16     	; 0x7a6 <EEPROM_read+0xea>
   	  {
       		transmitString_F(PSTR("EEPROM receive failed.."));
     796:	8a e8       	ldi	r24, 0x8A	; 138
     798:	91 e0       	ldi	r25, 0x01	; 1
     79a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
			i2c_stop();
     79e:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	   		return(1);
     7a2:	81 e0       	ldi	r24, 0x01	; 1
     7a4:	17 c0       	rjmp	.+46     	; 0x7d4 <EEPROM_read+0x118>
   	  }
	   
	   if((i%16) == 0) 
     7a6:	0f 70       	andi	r16, 0x0F	; 15
     7a8:	31 f4       	brne	.+12     	; 0x7b6 <EEPROM_read+0xfa>
	     TX_NEWLINE;
     7aa:	8d e0       	ldi	r24, 0x0D	; 13
     7ac:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     7b0:	8a e0       	ldi	r24, 0x0A	; 10
     7b2:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
	   transmitByte(data);
     7b6:	81 2f       	mov	r24, r17
     7b8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     7bc:	21 96       	adiw	r28, 0x01	; 1
     transmitString_F(PSTR("EEPROM sendAddress2 failed.."));
	 i2c_stop();
	 return(1);
   } 
   
   for(i=0;i<totalChar;i++)
     7be:	cf 15       	cp	r28, r15
     7c0:	e8 f2       	brcs	.-70     	; 0x77c <EEPROM_read+0xc0>
	     TX_NEWLINE;
	   transmitByte(data);
	   
   }
   
   TX_NEWLINE;
     7c2:	8d e0       	ldi	r24, 0x0D	; 13
     7c4:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     7c8:	8a e0       	ldi	r24, 0x0A	; 10
     7ca:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   i2c_stop();
     7ce:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
   
   return(0);
     7d2:	80 e0       	ldi	r24, 0x00	; 0
}
     7d4:	df 91       	pop	r29
     7d6:	cf 91       	pop	r28
     7d8:	1f 91       	pop	r17
     7da:	0f 91       	pop	r16
     7dc:	ff 90       	pop	r15
     7de:	df 90       	pop	r13
     7e0:	cf 90       	pop	r12
     7e2:	08 95       	ret

000007e4 <EEPROM_write>:

//******************************************************************
//Function to a character string to EEPROM 
//******************************************************************
unsigned char EEPROM_write(unsigned char highAddress, unsigned char lowAddress)
{
     7e4:	0f 93       	push	r16
     7e6:	1f 93       	push	r17
     7e8:	18 2f       	mov	r17, r24
     7ea:	06 2f       	mov	r16, r22
   unsigned char errorStatus, data;
   
   errorStatus = i2c_start();
     7ec:	0e 94 b0 06 	call	0xd60	; 0xd60 <i2c_start>
   if(errorStatus == 1)
     7f0:	81 30       	cpi	r24, 0x01	; 1
     7f2:	41 f4       	brne	.+16     	; 0x804 <EEPROM_write+0x20>
   {
     transmitString_F(PSTR("i2c start failed.."));
     7f4:	87 e7       	ldi	r24, 0x77	; 119
     7f6:	91 e0       	ldi	r25, 0x01	; 1
     7f8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
   	 i2c_stop();
     7fc:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return(1);
     800:	81 e0       	ldi	r24, 0x01	; 1
     802:	3f c0       	rjmp	.+126    	; 0x882 <EEPROM_write+0x9e>
   } 
   
   errorStatus = i2c_sendAddress(EEPROM_W);
     804:	80 ea       	ldi	r24, 0xA0	; 160
     806:	0e 94 d0 06 	call	0xda0	; 0xda0 <i2c_sendAddress>
   
   if(errorStatus == 1)
     80a:	81 30       	cpi	r24, 0x01	; 1
     80c:	41 f4       	brne	.+16     	; 0x81e <EEPROM_write+0x3a>
   {
     transmitString_F(PSTR("EEPROM sendAddress1 failed.."));
     80e:	8a e5       	ldi	r24, 0x5A	; 90
     810:	91 e0       	ldi	r25, 0x01	; 1
     812:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	 i2c_stop();
     816:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return(1);
     81a:	81 e0       	ldi	r24, 0x01	; 1
     81c:	32 c0       	rjmp	.+100    	; 0x882 <EEPROM_write+0x9e>
   } 
   
   errorStatus = i2c_sendData(highAddress);
     81e:	81 2f       	mov	r24, r17
     820:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <i2c_sendData>
   if(errorStatus == 1)
     824:	81 30       	cpi	r24, 0x01	; 1
     826:	41 f4       	brne	.+16     	; 0x838 <EEPROM_write+0x54>
   {
     transmitString_F(PSTR("EEPROM write-1 failed.."));
     828:	82 e4       	ldi	r24, 0x42	; 66
     82a:	91 e0       	ldi	r25, 0x01	; 1
     82c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	 i2c_stop();
     830:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return(1);
     834:	81 e0       	ldi	r24, 0x01	; 1
     836:	25 c0       	rjmp	.+74     	; 0x882 <EEPROM_write+0x9e>
   } 
   
 
   errorStatus = i2c_sendData(lowAddress);
     838:	80 2f       	mov	r24, r16
     83a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <i2c_sendData>
   if(errorStatus == 1)
     83e:	81 30       	cpi	r24, 0x01	; 1
     840:	c1 f4       	brne	.+48     	; 0x872 <EEPROM_write+0x8e>
   {
     transmitString_F(PSTR("EEPROM write-2 failed.."));
     842:	8a e2       	ldi	r24, 0x2A	; 42
     844:	91 e0       	ldi	r25, 0x01	; 1
     846:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	 i2c_stop();
     84a:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return(1);
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	18 c0       	rjmp	.+48     	; 0x882 <EEPROM_write+0x9e>
   } 
   
    while((data = receiveByte()) != 0x0d)
   {
      transmitByte(data);
     852:	81 2f       	mov	r24, r17
     854:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
	  if(data == 0x0d)
 	  transmitByte(0x0a);
	  errorStatus = i2c_sendData(data);
     858:	81 2f       	mov	r24, r17
     85a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <i2c_sendData>
   	  if(errorStatus == 1)
     85e:	81 30       	cpi	r24, 0x01	; 1
     860:	41 f4       	brne	.+16     	; 0x872 <EEPROM_write+0x8e>
   	  {
       		transmitString_F(PSTR("EEPROM write data failed.."));
     862:	8f e0       	ldi	r24, 0x0F	; 15
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
			i2c_stop();
     86a:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	   		return(1);
     86e:	81 e0       	ldi	r24, 0x01	; 1
     870:	08 c0       	rjmp	.+16     	; 0x882 <EEPROM_write+0x9e>
     transmitString_F(PSTR("EEPROM write-2 failed.."));
	 i2c_stop();
	 return(1);
   } 
   
    while((data = receiveByte()) != 0x0d)
     872:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
     876:	18 2f       	mov	r17, r24
     878:	8d 30       	cpi	r24, 0x0D	; 13
     87a:	59 f7       	brne	.-42     	; 0x852 <EEPROM_write+0x6e>
			i2c_stop();
	   		return(1);
   	  }
   }
   
   i2c_stop();
     87c:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
   
   return(0);
     880:	80 e0       	ldi	r24, 0x00	; 0
}
     882:	1f 91       	pop	r17
     884:	0f 91       	pop	r16
     886:	08 95       	ret

00000888 <EEPROM_readPage>:
unsigned char EEPROM_readPage( unsigned int pageNumber )
{
  unsigned char highAddress, lowAddress, errorStatus;
  unsigned int pageAddress;
  
  pageAddress = pageNumber * 64;
     888:	bc 01       	movw	r22, r24
     88a:	00 24       	eor	r0, r0
     88c:	76 95       	lsr	r23
     88e:	67 95       	ror	r22
     890:	07 94       	ror	r0
     892:	76 95       	lsr	r23
     894:	67 95       	ror	r22
     896:	07 94       	ror	r0
     898:	76 2f       	mov	r23, r22
     89a:	60 2d       	mov	r22, r0
  
  highAddress = (unsigned char)((pageAddress >> 8) & 0x00ff);
  lowAddress  = (unsigned char)( pageAddress & 0x00ff);
  
  errorStatus = EEPROM_read(highAddress, lowAddress, 64);
     89c:	87 2f       	mov	r24, r23
     89e:	40 e4       	ldi	r20, 0x40	; 64
     8a0:	0e 94 5e 03 	call	0x6bc	; 0x6bc <EEPROM_read>
  
  return(errorStatus);
 } 
     8a4:	08 95       	ret

000008a6 <EEPROM_writePage>:
unsigned char EEPROM_writePage( unsigned int pageNumber )
{
  unsigned char highAddress, lowAddress, errorStatus;
  unsigned int pageAddress;
  
  pageAddress = pageNumber * 64;
     8a6:	bc 01       	movw	r22, r24
     8a8:	00 24       	eor	r0, r0
     8aa:	76 95       	lsr	r23
     8ac:	67 95       	ror	r22
     8ae:	07 94       	ror	r0
     8b0:	76 95       	lsr	r23
     8b2:	67 95       	ror	r22
     8b4:	07 94       	ror	r0
     8b6:	76 2f       	mov	r23, r22
     8b8:	60 2d       	mov	r22, r0
  
  highAddress = (unsigned char)((pageAddress >> 8) & 0x00ff);
  lowAddress  = (unsigned char)( pageAddress & 0x00ff);
  
  errorStatus = EEPROM_write(highAddress, lowAddress);
     8ba:	87 2f       	mov	r24, r23
     8bc:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <EEPROM_write>
  
  return(errorStatus);  
} 
     8c0:	08 95       	ret

000008c2 <EEPROM_erase>:
 
//******************************************************************
//Erasing EEPROM (filling it with databyte 0xff)
//******************************************************************
unsigned char EEPROM_erase(void)
{
     8c2:	cf 93       	push	r28
     8c4:	df 93       	push	r29
  
  unsigned char errorStatus;
  unsigned int i;
  
  TX_NEWLINE;
     8c6:	8d e0       	ldi	r24, 0x0D	; 13
     8c8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     8cc:	8a e0       	ldi	r24, 0x0A	; 10
     8ce:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
  TX_NEWLINE;
     8d2:	8d e0       	ldi	r24, 0x0D	; 13
     8d4:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     8d8:	8a e0       	ldi	r24, 0x0A	; 10
     8da:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
  transmitString_F(PSTR("Wait..."));
     8de:	87 e0       	ldi	r24, 0x07	; 7
     8e0:	91 e0       	ldi	r25, 0x01	; 1
     8e2:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
  TX_NEWLINE;
     8e6:	8d e0       	ldi	r24, 0x0D	; 13
     8e8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     8ec:	8a e0       	ldi	r24, 0x0A	; 10
     8ee:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   
   errorStatus = i2c_start();
     8f2:	0e 94 b0 06 	call	0xd60	; 0xd60 <i2c_start>
   if(errorStatus == 1)
     8f6:	81 30       	cpi	r24, 0x01	; 1
     8f8:	41 f4       	brne	.+16     	; 0x90a <EEPROM_erase+0x48>
   {
     transmitString_F(PSTR("i2c start failed.."));
     8fa:	84 ef       	ldi	r24, 0xF4	; 244
     8fc:	90 e0       	ldi	r25, 0x00	; 0
     8fe:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
   	 i2c_stop();
     902:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return(1);
     906:	81 e0       	ldi	r24, 0x01	; 1
     908:	3b c0       	rjmp	.+118    	; 0x980 <EEPROM_erase+0xbe>
   } 
   
   errorStatus = i2c_sendAddress(EEPROM_W);
     90a:	80 ea       	ldi	r24, 0xA0	; 160
     90c:	0e 94 d0 06 	call	0xda0	; 0xda0 <i2c_sendAddress>
   
   if(errorStatus == 1)
     910:	81 30       	cpi	r24, 0x01	; 1
     912:	41 f4       	brne	.+16     	; 0x924 <EEPROM_erase+0x62>
   {
     transmitString_F(PSTR("EEPROM sendAddress1 failed.."));
     914:	87 ed       	ldi	r24, 0xD7	; 215
     916:	90 e0       	ldi	r25, 0x00	; 0
     918:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	 i2c_stop();
     91c:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return(1);
     920:	81 e0       	ldi	r24, 0x01	; 1
     922:	2e c0       	rjmp	.+92     	; 0x980 <EEPROM_erase+0xbe>
   } 
   
   errorStatus = i2c_sendData(0x00);
     924:	80 e0       	ldi	r24, 0x00	; 0
     926:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <i2c_sendData>
   if(errorStatus == 1)
     92a:	81 30       	cpi	r24, 0x01	; 1
     92c:	41 f4       	brne	.+16     	; 0x93e <EEPROM_erase+0x7c>
   {
     transmitString_F(PSTR("EEPROM write-1 failed.."));
     92e:	8f eb       	ldi	r24, 0xBF	; 191
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	 i2c_stop();
     936:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return(1);
     93a:	81 e0       	ldi	r24, 0x01	; 1
     93c:	21 c0       	rjmp	.+66     	; 0x980 <EEPROM_erase+0xbe>
   } 
   
 
   errorStatus = i2c_sendData(0x00);
     93e:	80 e0       	ldi	r24, 0x00	; 0
     940:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <i2c_sendData>
   if(errorStatus == 1)
     944:	81 30       	cpi	r24, 0x01	; 1
     946:	41 f4       	brne	.+16     	; 0x958 <EEPROM_erase+0x96>
   {
     transmitString_F(PSTR("EEPROM write-2 failed.."));
     948:	87 ea       	ldi	r24, 0xA7	; 167
     94a:	90 e0       	ldi	r25, 0x00	; 0
     94c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	 i2c_stop();
     950:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return(1);
     954:	81 e0       	ldi	r24, 0x01	; 1
     956:	14 c0       	rjmp	.+40     	; 0x980 <EEPROM_erase+0xbe>
	 return(1);
   } 
   
 
   errorStatus = i2c_sendData(0x00);
   if(errorStatus == 1)
     958:	c0 e0       	ldi	r28, 0x00	; 0
     95a:	d0 e0       	ldi	r29, 0x00	; 0
	 return(1);
   } 
   
    for(i=0;i<0x8000;i++)
   {
	  errorStatus = i2c_sendData(0xff);
     95c:	8f ef       	ldi	r24, 0xFF	; 255
     95e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <i2c_sendData>
   	  if(errorStatus == 1)
     962:	81 30       	cpi	r24, 0x01	; 1
     964:	41 f4       	brne	.+16     	; 0x976 <EEPROM_erase+0xb4>
   	  {
       		transmitString_F(PSTR("EEPROM write data failed.."));
     966:	8c e8       	ldi	r24, 0x8C	; 140
     968:	90 e0       	ldi	r25, 0x00	; 0
     96a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
			i2c_stop();
     96e:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	   		return(1);
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	05 c0       	rjmp	.+10     	; 0x980 <EEPROM_erase+0xbe>
     transmitString_F(PSTR("EEPROM write-2 failed.."));
	 i2c_stop();
	 return(1);
   } 
   
    for(i=0;i<0x8000;i++)
     976:	21 96       	adiw	r28, 0x01	; 1
     978:	8a f7       	brpl	.-30     	; 0x95c <EEPROM_erase+0x9a>
			i2c_stop();
	   		return(1);
   	  }
   }
   
   i2c_stop();
     97a:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
   
   return(0);
     97e:	80 e0       	ldi	r24, 0x00	; 0

}   	  
     980:	df 91       	pop	r29
     982:	cf 91       	pop	r28
     984:	08 95       	ret

00000986 <port_init>:
#include "RTC_routines.h"

		  
void port_init(void)
{
 PORTA = 0x00;
     986:	1b ba       	out	0x1b, r1	; 27
 DDRA  = 0x00;
     988:	1a ba       	out	0x1a, r1	; 26
 PORTB = 0x00;
     98a:	18 ba       	out	0x18, r1	; 24
 DDRB  = 0x00;
     98c:	17 ba       	out	0x17, r1	; 23
 PORTC = 0x00;
     98e:	15 ba       	out	0x15, r1	; 21
 DDRC  = 0xff;
     990:	8f ef       	ldi	r24, 0xFF	; 255
     992:	84 bb       	out	0x14, r24	; 20
 PORTD = 0x00;
     994:	12 ba       	out	0x12, r1	; 18
 DDRD  = 0x00;
     996:	11 ba       	out	0x11, r1	; 17
 PORTE = 0x00;
     998:	13 b8       	out	0x03, r1	; 3
 DDRE  = 0x00;
     99a:	12 b8       	out	0x02, r1	; 2
 PORTF = 0x00;
     99c:	10 92 62 00 	sts	0x0062, r1
 DDRF  = 0x00;
     9a0:	10 92 61 00 	sts	0x0061, r1
 PORTG = 0x00;
     9a4:	10 92 65 00 	sts	0x0065, r1
 DDRG  = 0x00;
     9a8:	10 92 64 00 	sts	0x0064, r1
}
     9ac:	08 95       	ret

000009ae <twi_init>:

//TWI initialize
// bit rate:18 (freq: 100Khz)
void twi_init(void)
{
 TWCR= 0X00; //disable twi
     9ae:	e4 e7       	ldi	r30, 0x74	; 116
     9b0:	f0 e0       	ldi	r31, 0x00	; 0
     9b2:	10 82       	st	Z, r1
 TWBR= 0x12; //set bit rate
     9b4:	82 e1       	ldi	r24, 0x12	; 18
     9b6:	80 93 70 00 	sts	0x0070, r24
 TWSR= 0x00; //set prescale
     9ba:	10 92 71 00 	sts	0x0071, r1
 TWCR= 0x44; //enable twi
     9be:	84 e4       	ldi	r24, 0x44	; 68
     9c0:	80 83       	st	Z, r24
}
     9c2:	08 95       	ret

000009c4 <init_devices>:

//call this routine to initialize all peripherals
void init_devices(void)
{
 //stop errant interrupts until set up
 cli(); //disable all interrupts
     9c4:	f8 94       	cli
 XDIV  = 0x00; //xtal divider
     9c6:	1c be       	out	0x3c, r1	; 60
 XMCRA = 0x00; //external memory
     9c8:	10 92 6d 00 	sts	0x006D, r1
 port_init();
     9cc:	0e 94 c3 04 	call	0x986	; 0x986 <port_init>
 uart0_init();
     9d0:	0e 94 e7 0a 	call	0x15ce	; 0x15ce <uart0_init>
 twi_init();
     9d4:	0e 94 d7 04 	call	0x9ae	; 0x9ae <twi_init>
 
 MCUCR = 0x00;
     9d8:	15 be       	out	0x35, r1	; 53
 EICRA = 0x00; //extended ext ints
     9da:	10 92 6a 00 	sts	0x006A, r1
 EICRB = 0x00; //extended ext ints
     9de:	1a be       	out	0x3a, r1	; 58
 EIMSK = 0x00;
     9e0:	19 be       	out	0x39, r1	; 57
 TIMSK = 0x00; //timer interrupt sources
     9e2:	17 be       	out	0x37, r1	; 55
 ETIMSK = 0x00; //extended timer interrupt sources
     9e4:	10 92 7d 00 	sts	0x007D, r1
 //SEI(); //re-enable interrupts
} 
     9e8:	08 95       	ret

000009ea <main>:

//******************* MAIN FUNCTION *******************

 int main(void)
{
     9ea:	2f 92       	push	r2
     9ec:	3f 92       	push	r3
     9ee:	4f 92       	push	r4
     9f0:	5f 92       	push	r5
     9f2:	6f 92       	push	r6
     9f4:	7f 92       	push	r7
     9f6:	8f 92       	push	r8
     9f8:	9f 92       	push	r9
     9fa:	af 92       	push	r10
     9fc:	bf 92       	push	r11
     9fe:	cf 92       	push	r12
     a00:	df 92       	push	r13
     a02:	ef 92       	push	r14
     a04:	ff 92       	push	r15
     a06:	0f 93       	push	r16
     a08:	1f 93       	push	r17
     a0a:	cf 93       	push	r28
     a0c:	df 93       	push	r29
   unsigned char errorStatus, data, option, totalChar;
   unsigned int pageNumber;
   
   init_devices();
     a0e:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <init_devices>
   
   while(1)
   {
   TX_NEWLINE;
   TX_NEWLINE;
   transmitString_F(PSTR("Press any key.."));
     a12:	0f 2e       	mov	r0, r31
     a14:	fd ee       	ldi	r31, 0xED	; 237
     a16:	ef 2e       	mov	r14, r31
     a18:	f3 e0       	ldi	r31, 0x03	; 3
     a1a:	ff 2e       	mov	r15, r31
     a1c:	f0 2d       	mov	r31, r0
   option = receiveByte();
      
    
   TX_NEWLINE;
   transmitString_F(PSTR("> 0 : Erase EEPROM"));
     a1e:	0f 2e       	mov	r0, r31
     a20:	fa ed       	ldi	r31, 0xDA	; 218
     a22:	cf 2e       	mov	r12, r31
     a24:	f3 e0       	ldi	r31, 0x03	; 3
     a26:	df 2e       	mov	r13, r31
     a28:	f0 2d       	mov	r31, r0
   TX_NEWLINE;
   transmitString_F(PSTR("> 1 : Write EEPROM"));
     a2a:	0f 2e       	mov	r0, r31
     a2c:	f7 ec       	ldi	r31, 0xC7	; 199
     a2e:	af 2e       	mov	r10, r31
     a30:	f3 e0       	ldi	r31, 0x03	; 3
     a32:	bf 2e       	mov	r11, r31
     a34:	f0 2d       	mov	r31, r0
   TX_NEWLINE;
   transmitString_F(PSTR("> 2 : Read EEPROM"));
     a36:	0f 2e       	mov	r0, r31
     a38:	f5 eb       	ldi	r31, 0xB5	; 181
     a3a:	8f 2e       	mov	r8, r31
     a3c:	f3 e0       	ldi	r31, 0x03	; 3
     a3e:	9f 2e       	mov	r9, r31
     a40:	f0 2d       	mov	r31, r0
   TX_NEWLINE;
   transmitString_F(PSTR("> 3 : Write EEPROM Page"));
     a42:	0f 2e       	mov	r0, r31
     a44:	fd e9       	ldi	r31, 0x9D	; 157
     a46:	6f 2e       	mov	r6, r31
     a48:	f3 e0       	ldi	r31, 0x03	; 3
     a4a:	7f 2e       	mov	r7, r31
     a4c:	f0 2d       	mov	r31, r0
   TX_NEWLINE;
   transmitString_F(PSTR("> 4 : Read EEPROM Page"));
     a4e:	0f 2e       	mov	r0, r31
     a50:	f6 e8       	ldi	r31, 0x86	; 134
     a52:	4f 2e       	mov	r4, r31
     a54:	f3 e0       	ldi	r31, 0x03	; 3
     a56:	5f 2e       	mov	r5, r31
     a58:	f0 2d       	mov	r31, r0
   TX_NEWLINE;
   transmitString_F(PSTR("> 5 : Display RTC Date"));
     a5a:	0f 2e       	mov	r0, r31
     a5c:	ff e6       	ldi	r31, 0x6F	; 111
     a5e:	2f 2e       	mov	r2, r31
     a60:	f3 e0       	ldi	r31, 0x03	; 3
     a62:	3f 2e       	mov	r3, r31
     a64:	f0 2d       	mov	r31, r0
   transmitString_F(PSTR(">Communication Started..."));
   */
   
   while(1)
   {
   TX_NEWLINE;
     a66:	8d e0       	ldi	r24, 0x0D	; 13
     a68:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     a6c:	8a e0       	ldi	r24, 0x0A	; 10
     a6e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   TX_NEWLINE;
     a72:	8d e0       	ldi	r24, 0x0D	; 13
     a74:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     a78:	8a e0       	ldi	r24, 0x0A	; 10
     a7a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   transmitString_F(PSTR("Press any key.."));
     a7e:	c7 01       	movw	r24, r14
     a80:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
   option = receiveByte();
     a84:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
      
    
   TX_NEWLINE;
     a88:	8d e0       	ldi	r24, 0x0D	; 13
     a8a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     a8e:	8a e0       	ldi	r24, 0x0A	; 10
     a90:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   transmitString_F(PSTR("> 0 : Erase EEPROM"));
     a94:	c6 01       	movw	r24, r12
     a96:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
   TX_NEWLINE;
     a9a:	8d e0       	ldi	r24, 0x0D	; 13
     a9c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     aa0:	8a e0       	ldi	r24, 0x0A	; 10
     aa2:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   transmitString_F(PSTR("> 1 : Write EEPROM"));
     aa6:	c5 01       	movw	r24, r10
     aa8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
   TX_NEWLINE;
     aac:	8d e0       	ldi	r24, 0x0D	; 13
     aae:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     ab2:	8a e0       	ldi	r24, 0x0A	; 10
     ab4:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   transmitString_F(PSTR("> 2 : Read EEPROM"));
     ab8:	c4 01       	movw	r24, r8
     aba:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
   TX_NEWLINE;
     abe:	8d e0       	ldi	r24, 0x0D	; 13
     ac0:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     ac4:	8a e0       	ldi	r24, 0x0A	; 10
     ac6:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   transmitString_F(PSTR("> 3 : Write EEPROM Page"));
     aca:	c3 01       	movw	r24, r6
     acc:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
   TX_NEWLINE;
     ad0:	8d e0       	ldi	r24, 0x0D	; 13
     ad2:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     ad6:	8a e0       	ldi	r24, 0x0A	; 10
     ad8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   transmitString_F(PSTR("> 4 : Read EEPROM Page"));
     adc:	c2 01       	movw	r24, r4
     ade:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
   TX_NEWLINE;
     ae2:	8d e0       	ldi	r24, 0x0D	; 13
     ae4:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     ae8:	8a e0       	ldi	r24, 0x0A	; 10
     aea:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   transmitString_F(PSTR("> 5 : Display RTC Date"));
     aee:	c1 01       	movw	r24, r2
     af0:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
   TX_NEWLINE;
     af4:	8d e0       	ldi	r24, 0x0D	; 13
     af6:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     afa:	8a e0       	ldi	r24, 0x0A	; 10
     afc:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   transmitString_F(PSTR("> 6 : Display RTC Time"));
     b00:	88 e5       	ldi	r24, 0x58	; 88
     b02:	93 e0       	ldi	r25, 0x03	; 3
     b04:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
   TX_NEWLINE;
     b08:	8d e0       	ldi	r24, 0x0D	; 13
     b0a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     b0e:	8a e0       	ldi	r24, 0x0A	; 10
     b10:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   transmitString_F(PSTR("> 7 : Update RTC Date"));
     b14:	82 e4       	ldi	r24, 0x42	; 66
     b16:	93 e0       	ldi	r25, 0x03	; 3
     b18:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
   TX_NEWLINE;
     b1c:	8d e0       	ldi	r24, 0x0D	; 13
     b1e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     b22:	8a e0       	ldi	r24, 0x0A	; 10
     b24:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   transmitString_F(PSTR("> 8 : Update RTC Time"));
     b28:	8c e2       	ldi	r24, 0x2C	; 44
     b2a:	93 e0       	ldi	r25, 0x03	; 3
     b2c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
   TX_NEWLINE;
     b30:	8d e0       	ldi	r24, 0x0D	; 13
     b32:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     b36:	8a e0       	ldi	r24, 0x0A	; 10
     b38:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   TX_NEWLINE;
     b3c:	8d e0       	ldi	r24, 0x0D	; 13
     b3e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     b42:	8a e0       	ldi	r24, 0x0A	; 10
     b44:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   transmitString_F(PSTR("> Select Option (0-8): "));
     b48:	84 e1       	ldi	r24, 0x14	; 20
     b4a:	93 e0       	ldi	r25, 0x03	; 3
     b4c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
   
   option = receiveByte();
     b50:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
     b54:	08 2f       	mov	r16, r24
   transmitByte(option);
     b56:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   
   errorStatus = 0;
   totalChar = 0;
   pageNumber = 0;
   
   switch (option)
     b5a:	05 33       	cpi	r16, 0x35	; 53
     b5c:	58 f4       	brcc	.+22     	; 0xb74 <main+0x18a>
     b5e:	03 33       	cpi	r16, 0x33	; 51
     b60:	08 f0       	brcs	.+2      	; 0xb64 <main+0x17a>
     b62:	61 c0       	rjmp	.+194    	; 0xc26 <main+0x23c>
     b64:	01 33       	cpi	r16, 0x31	; 49
     b66:	41 f1       	breq	.+80     	; 0xbb8 <main+0x1ce>
     b68:	02 33       	cpi	r16, 0x32	; 50
     b6a:	a8 f5       	brcc	.+106    	; 0xbd6 <main+0x1ec>
     b6c:	00 33       	cpi	r16, 0x30	; 48
     b6e:	09 f0       	breq	.+2      	; 0xb72 <main+0x188>
     b70:	c9 c0       	rjmp	.+402    	; 0xd04 <main+0x31a>
     b72:	0d c0       	rjmp	.+26     	; 0xb8e <main+0x1a4>
     b74:	06 33       	cpi	r16, 0x36	; 54
     b76:	09 f4       	brne	.+2      	; 0xb7a <main+0x190>
     b78:	bc c0       	rjmp	.+376    	; 0xcf2 <main+0x308>
     b7a:	06 33       	cpi	r16, 0x36	; 54
     b7c:	08 f4       	brcc	.+2      	; 0xb80 <main+0x196>
     b7e:	b6 c0       	rjmp	.+364    	; 0xcec <main+0x302>
     b80:	07 33       	cpi	r16, 0x37	; 55
     b82:	09 f4       	brne	.+2      	; 0xb86 <main+0x19c>
     b84:	b9 c0       	rjmp	.+370    	; 0xcf8 <main+0x30e>
     b86:	08 33       	cpi	r16, 0x38	; 56
     b88:	09 f0       	breq	.+2      	; 0xb8c <main+0x1a2>
     b8a:	bc c0       	rjmp	.+376    	; 0xd04 <main+0x31a>
     b8c:	b8 c0       	rjmp	.+368    	; 0xcfe <main+0x314>
   {
    
	case '0': errorStatus = EEPROM_erase();
     b8e:	0e 94 61 04 	call	0x8c2	; 0x8c2 <EEPROM_erase>
     b92:	18 2f       	mov	r17, r24
   			  TX_NEWLINE;
     b94:	8d e0       	ldi	r24, 0x0D	; 13
     b96:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     b9a:	8a e0       	ldi	r24, 0x0A	; 10
     b9c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
			  if(errorStatus == 1)
     ba0:	11 30       	cpi	r17, 0x01	; 1
     ba2:	29 f4       	brne	.+10     	; 0xbae <main+0x1c4>
     		     transmitString_F(PSTR(" EEPROM erase failed.."));
     ba4:	8d ef       	ldi	r24, 0xFD	; 253
     ba6:	92 e0       	ldi	r25, 0x02	; 2
     ba8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
     bac:	be c0       	rjmp	.+380    	; 0xd2a <main+0x340>
			  else
			     transmitString_F(PSTR(" EEPROM erased successfully.."));
     bae:	8f ed       	ldi	r24, 0xDF	; 223
     bb0:	92 e0       	ldi	r25, 0x02	; 2
     bb2:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
     bb6:	c3 c0       	rjmp	.+390    	; 0xd3e <main+0x354>
   			  break;
	case '1': TX_NEWLINE;
     bb8:	8d e0       	ldi	r24, 0x0D	; 13
     bba:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     bbe:	8a e0       	ldi	r24, 0x0A	; 10
     bc0:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   		 	  transmitString_F(PSTR(" Enter text: "));
     bc4:	81 ed       	ldi	r24, 0xD1	; 209
     bc6:	92 e0       	ldi	r25, 0x02	; 2
     bc8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
			  errorStatus = EEPROM_write(0x00,0x00);
     bcc:	80 e0       	ldi	r24, 0x00	; 0
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	0e 94 f2 03 	call	0x7e4	; 0x7e4 <EEPROM_write>
   			  break;
     bd4:	a8 c0       	rjmp	.+336    	; 0xd26 <main+0x33c>
	case '2': TX_NEWLINE;
     bd6:	8d e0       	ldi	r24, 0x0D	; 13
     bd8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     bdc:	8a e0       	ldi	r24, 0x0A	; 10
     bde:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   		 	  transmitString_F(PSTR(" How many bytes?(00-64): "));
     be2:	87 eb       	ldi	r24, 0xB7	; 183
     be4:	92 e0       	ldi	r25, 0x02	; 2
     be6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
			  data = receiveByte(); transmitByte(data);
     bea:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
     bee:	18 2f       	mov	r17, r24
     bf0:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
			  totalChar = (data & 0x0f) * 10;
     bf4:	1f 70       	andi	r17, 0x0F	; 15
     bf6:	11 0f       	add	r17, r17
     bf8:	01 2f       	mov	r16, r17
     bfa:	00 0f       	add	r16, r16
     bfc:	00 0f       	add	r16, r16
     bfe:	01 0f       	add	r16, r17
			  data = receiveByte(); transmitByte(data);
     c00:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
     c04:	18 2f       	mov	r17, r24
     c06:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
			  totalChar += (data & 0x0f);
			  //totalChar=2;
			  TX_NEWLINE;
     c0a:	8d e0       	ldi	r24, 0x0D	; 13
     c0c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     c10:	8a e0       	ldi	r24, 0x0A	; 10
     c12:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
	case '2': TX_NEWLINE;
   		 	  transmitString_F(PSTR(" How many bytes?(00-64): "));
			  data = receiveByte(); transmitByte(data);
			  totalChar = (data & 0x0f) * 10;
			  data = receiveByte(); transmitByte(data);
			  totalChar += (data & 0x0f);
     c16:	1f 70       	andi	r17, 0x0F	; 15
     c18:	40 2f       	mov	r20, r16
     c1a:	41 0f       	add	r20, r17
			  //totalChar=2;
			  TX_NEWLINE;
			  errorStatus = EEPROM_read(0x00,0x00,totalChar);
     c1c:	80 e0       	ldi	r24, 0x00	; 0
     c1e:	60 e0       	ldi	r22, 0x00	; 0
     c20:	0e 94 5e 03 	call	0x6bc	; 0x6bc <EEPROM_read>
   			  break;
     c24:	80 c0       	rjmp	.+256    	; 0xd26 <main+0x33c>
	case '3': 
	case '4': TX_NEWLINE;
     c26:	8d e0       	ldi	r24, 0x0D	; 13
     c28:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     c2c:	8a e0       	ldi	r24, 0x0A	; 10
     c2e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   		 	  transmitString_F(PSTR(" Enter Page Number (000-511): "));
     c32:	88 e9       	ldi	r24, 0x98	; 152
     c34:	92 e0       	ldi	r25, 0x02	; 2
     c36:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
			  data = receiveByte(); transmitByte(data);
     c3a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
     c3e:	18 2f       	mov	r17, r24
     c40:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
			  pageNumber = (data & 0x0f) * 100;
     c44:	81 2f       	mov	r24, r17
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	8f 70       	andi	r24, 0x0F	; 15
     c4a:	90 70       	andi	r25, 0x00	; 0
     c4c:	24 e6       	ldi	r18, 0x64	; 100
     c4e:	30 e0       	ldi	r19, 0x00	; 0
     c50:	82 9f       	mul	r24, r18
     c52:	e0 01       	movw	r28, r0
     c54:	83 9f       	mul	r24, r19
     c56:	d0 0d       	add	r29, r0
     c58:	92 9f       	mul	r25, r18
     c5a:	d0 0d       	add	r29, r0
     c5c:	11 24       	eor	r1, r1
			  data = receiveByte(); transmitByte(data);
     c5e:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
     c62:	18 2f       	mov	r17, r24
     c64:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
			  pageNumber += (data & 0x0f) * 10;
     c68:	81 2f       	mov	r24, r17
     c6a:	90 e0       	ldi	r25, 0x00	; 0
     c6c:	8f 70       	andi	r24, 0x0F	; 15
     c6e:	90 70       	andi	r25, 0x00	; 0
     c70:	9c 01       	movw	r18, r24
     c72:	22 0f       	add	r18, r18
     c74:	33 1f       	adc	r19, r19
     c76:	88 0f       	add	r24, r24
     c78:	99 1f       	adc	r25, r25
     c7a:	88 0f       	add	r24, r24
     c7c:	99 1f       	adc	r25, r25
     c7e:	88 0f       	add	r24, r24
     c80:	99 1f       	adc	r25, r25
     c82:	82 0f       	add	r24, r18
     c84:	93 1f       	adc	r25, r19
     c86:	c8 0f       	add	r28, r24
     c88:	d9 1f       	adc	r29, r25
			  data = receiveByte(); transmitByte(data);
     c8a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
     c8e:	18 2f       	mov	r17, r24
     c90:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
			  pageNumber += (data & 0x0f);
     c94:	1f 70       	andi	r17, 0x0F	; 15
     c96:	c1 0f       	add	r28, r17
     c98:	d1 1d       	adc	r29, r1
			  if(pageNumber > 511)
     c9a:	32 e0       	ldi	r19, 0x02	; 2
     c9c:	c0 30       	cpi	r28, 0x00	; 0
     c9e:	d3 07       	cpc	r29, r19
     ca0:	58 f0       	brcs	.+22     	; 0xcb8 <main+0x2ce>
			  {
			    TX_NEWLINE;
     ca2:	8d e0       	ldi	r24, 0x0D	; 13
     ca4:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     ca8:	8a e0       	ldi	r24, 0x0A	; 10
     caa:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   		 	  	transmitString_F(PSTR(" Address out of range.. "));
     cae:	8f e7       	ldi	r24, 0x7F	; 127
     cb0:	92 e0       	ldi	r25, 0x02	; 2
     cb2:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
				break;
     cb6:	43 c0       	rjmp	.+134    	; 0xd3e <main+0x354>
			  }	
			  TX_NEWLINE;
     cb8:	8d e0       	ldi	r24, 0x0D	; 13
     cba:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     cbe:	8a e0       	ldi	r24, 0x0A	; 10
     cc0:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
			  if(option == '3')
     cc4:	03 33       	cpi	r16, 0x33	; 51
     cc6:	71 f4       	brne	.+28     	; 0xce4 <main+0x2fa>
			  {
				 TX_NEWLINE;
     cc8:	8d e0       	ldi	r24, 0x0D	; 13
     cca:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     cce:	8a e0       	ldi	r24, 0x0A	; 10
     cd0:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   		 	  	 transmitString_F(PSTR(" Enter text: "));
     cd4:	81 e7       	ldi	r24, 0x71	; 113
     cd6:	92 e0       	ldi	r25, 0x02	; 2
     cd8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
				 errorStatus = EEPROM_writePage(pageNumber);
     cdc:	ce 01       	movw	r24, r28
     cde:	0e 94 53 04 	call	0x8a6	; 0x8a6 <EEPROM_writePage>
     ce2:	21 c0       	rjmp	.+66     	; 0xd26 <main+0x33c>
			  } 
			  else
			     errorStatus = EEPROM_readPage(pageNumber);
     ce4:	ce 01       	movw	r24, r28
     ce6:	0e 94 44 04 	call	0x888	; 0x888 <EEPROM_readPage>
     cea:	1d c0       	rjmp	.+58     	; 0xd26 <main+0x33c>
   			  break;
	case '5': RTC_displayDate();
     cec:	0e 94 85 08 	call	0x110a	; 0x110a <RTC_displayDate>
		 	  break;
     cf0:	26 c0       	rjmp	.+76     	; 0xd3e <main+0x354>
	case '6': RTC_displayTime();
     cf2:	0e 94 36 08 	call	0x106c	; 0x106c <RTC_displayTime>
		 	  break;
     cf6:	23 c0       	rjmp	.+70     	; 0xd3e <main+0x354>
	case '7': RTC_updateDate();
     cf8:	0e 94 11 0a 	call	0x1422	; 0x1422 <RTC_updateDate>
		 	  break;
     cfc:	20 c0       	rjmp	.+64     	; 0xd3e <main+0x354>
	case '8': RTC_updateTime();
     cfe:	0e 94 86 09 	call	0x130c	; 0x130c <RTC_updateTime>
		 	  break;
     d02:	1d c0       	rjmp	.+58     	; 0xd3e <main+0x354>
	default:  TX_NEWLINE;
     d04:	8d e0       	ldi	r24, 0x0D	; 13
     d06:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     d0a:	8a e0       	ldi	r24, 0x0A	; 10
     d0c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   		 	  transmitString_F(PSTR(" Invalid option!"));
     d10:	80 e6       	ldi	r24, 0x60	; 96
     d12:	92 e0       	ldi	r25, 0x02	; 2
     d14:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
			  TX_NEWLINE;
     d18:	8d e0       	ldi	r24, 0x0D	; 13
     d1a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     d1e:	8a e0       	ldi	r24, 0x0A	; 10
     d20:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     d24:	0c c0       	rjmp	.+24     	; 0xd3e <main+0x354>
	}		  
   
    if(errorStatus == 1)
     d26:	81 30       	cpi	r24, 0x01	; 1
     d28:	51 f4       	brne	.+20     	; 0xd3e <main+0x354>
   {
     transmitString_F(PSTR(" EEPROM operation failed.."));
     d2a:	85 e4       	ldi	r24, 0x45	; 69
     d2c:	92 e0       	ldi	r25, 0x02	; 2
     d2e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	 TX_NEWLINE;
     d32:	8d e0       	ldi	r24, 0x0D	; 13
     d34:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     d38:	8a e0       	ldi	r24, 0x0A	; 10
     d3a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   }
   
   TX_NEWLINE;
     d3e:	8d e0       	ldi	r24, 0x0D	; 13
     d40:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     d44:	8a e0       	ldi	r24, 0x0A	; 10
     d46:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   transmitString_F(PSTR(" Finished.."));
     d4a:	89 e3       	ldi	r24, 0x39	; 57
     d4c:	92 e0       	ldi	r25, 0x02	; 2
     d4e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
   TX_NEWLINE;
     d52:	8d e0       	ldi	r24, 0x0D	; 13
     d54:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
     d58:	8a e0       	ldi	r24, 0x0A	; 10
     d5a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
   }
     d5e:	83 ce       	rjmp	.-762    	; 0xa66 <main+0x7c>

00000d60 <i2c_start>:
//Function to start i2c communication
//*************************************************
unsigned char i2c_start(void)
{
 
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 	//Send START condition
     d60:	84 ea       	ldi	r24, 0xA4	; 164
     d62:	80 93 74 00 	sts	0x0074, r24
	
    while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
     d66:	e4 e7       	ldi	r30, 0x74	; 116
     d68:	f0 e0       	ldi	r31, 0x00	; 0
     d6a:	80 81       	ld	r24, Z
     d6c:	88 23       	and	r24, r24
     d6e:	ec f7       	brge	.-6      	; 0xd6a <i2c_start+0xa>
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == START)			//Check value of TWI Status Register
     d70:	90 91 71 00 	lds	r25, 0x0071
     d74:	98 7f       	andi	r25, 0xF8	; 248
 	   return(0);
     d76:	81 e0       	ldi	r24, 0x01	; 1
     d78:	98 30       	cpi	r25, 0x08	; 8
     d7a:	09 f4       	brne	.+2      	; 0xd7e <i2c_start+0x1e>
     d7c:	80 e0       	ldi	r24, 0x00	; 0
	else
	   return(1);
}
     d7e:	08 95       	ret

00000d80 <i2c_repeatStart>:
//Function for repeat start condition
//*************************************************
unsigned char i2c_repeatStart(void)
{
 
    TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN); 		//Send START condition
     d80:	84 ea       	ldi	r24, 0xA4	; 164
     d82:	80 93 74 00 	sts	0x0074, r24
    while (!(TWCR & (1<<TWINT)));   		//Wait for TWINT flag set. This indicates that the
     d86:	e4 e7       	ldi	r30, 0x74	; 116
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	88 23       	and	r24, r24
     d8e:	ec f7       	brge	.-6      	; 0xd8a <i2c_repeatStart+0xa>
		  								//START condition has been transmitted
    if ((TWSR & 0xF8) == REPEAT_START)			//Check value of TWI Status Register
     d90:	90 91 71 00 	lds	r25, 0x0071
     d94:	98 7f       	andi	r25, 0xF8	; 248
 	   return(0);
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 31       	cpi	r25, 0x10	; 16
     d9a:	09 f4       	brne	.+2      	; 0xd9e <i2c_repeatStart+0x1e>
     d9c:	80 e0       	ldi	r24, 0x00	; 0
	else
	   return(1);
}
     d9e:	08 95       	ret

00000da0 <i2c_sendAddress>:
//*************************************************
unsigned char i2c_sendAddress(unsigned char address)
{
   unsigned char STATUS;
   
   if((address & 0x01) == 0) 
     da0:	80 fd       	sbrc	r24, 0
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <i2c_sendAddress+0x8>
     STATUS = MT_SLA_ACK;
     da4:	28 e1       	ldi	r18, 0x18	; 24
     da6:	01 c0       	rjmp	.+2      	; 0xdaa <i2c_sendAddress+0xa>
   else
     STATUS = MR_SLA_ACK; 
     da8:	20 e4       	ldi	r18, 0x40	; 64
   
   TWDR = address; 
     daa:	80 93 73 00 	sts	0x0073, r24
   TWCR = (1<<TWINT)|(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
     dae:	84 e8       	ldi	r24, 0x84	; 132
     db0:	80 93 74 00 	sts	0x0074, r24
   		  			 				   //in TWCR to start transmission of address
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
     db4:	e4 e7       	ldi	r30, 0x74	; 116
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	88 23       	and	r24, r24
     dbc:	ec f7       	brge	.-6      	; 0xdb8 <i2c_sendAddress+0x18>
   		 		   					   //SLA+W has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) == STATUS)	   //Check value of TWI Status Register
     dbe:	40 91 71 00 	lds	r20, 0x0071
     dc2:	50 e0       	ldi	r21, 0x00	; 0
     dc4:	48 7f       	andi	r20, 0xF8	; 248
     dc6:	50 70       	andi	r21, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
   	  return(0);
     dca:	81 e0       	ldi	r24, 0x01	; 1
     dcc:	42 17       	cp	r20, r18
     dce:	53 07       	cpc	r21, r19
     dd0:	09 f4       	brne	.+2      	; 0xdd4 <i2c_sendAddress+0x34>
     dd2:	80 e0       	ldi	r24, 0x00	; 0
   else 
      return(1);
}
     dd4:	08 95       	ret

00000dd6 <i2c_sendData>:
//**************************************************
//Function to transmit a data byte
//*************************************************
unsigned char i2c_sendData(unsigned char data)
{
   TWDR = data; 
     dd6:	80 93 73 00 	sts	0x0073, r24
   TWCR = (1<<TWINT) |(1<<TWEN);	   //Load SLA_W into TWDR Register. Clear TWINT bit
     dda:	84 e8       	ldi	r24, 0x84	; 132
     ddc:	80 93 74 00 	sts	0x0074, r24
   		  			 				   //in TWCR to start transmission of data
   while (!(TWCR & (1<<TWINT)));	   //Wait for TWINT flag set. This indicates that the
     de0:	e4 e7       	ldi	r30, 0x74	; 116
     de2:	f0 e0       	ldi	r31, 0x00	; 0
     de4:	80 81       	ld	r24, Z
     de6:	88 23       	and	r24, r24
     de8:	ec f7       	brge	.-6      	; 0xde4 <i2c_sendData+0xe>
   		 		   					   //data has been transmitted, and
									   //ACK/NACK has been received.
   if ((TWSR & 0xF8) != MT_DATA_ACK)   //Check value of TWI Status Register
     dea:	90 91 71 00 	lds	r25, 0x0071
     dee:	98 7f       	andi	r25, 0xF8	; 248
   	  return(1);
     df0:	81 e0       	ldi	r24, 0x01	; 1
     df2:	98 32       	cpi	r25, 0x28	; 40
     df4:	09 f4       	brne	.+2      	; 0xdf8 <i2c_sendData+0x22>
     df6:	80 e0       	ldi	r24, 0x00	; 0
   else
      return(0);
}
     df8:	08 95       	ret

00000dfa <i2c_receiveData_ACK>:
//*****************************************************
unsigned char i2c_receiveData_ACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWEN);
     dfa:	84 ec       	ldi	r24, 0xC4	; 196
     dfc:	80 93 74 00 	sts	0x0074, r24
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
     e00:	e4 e7       	ldi	r30, 0x74	; 116
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	88 23       	and	r24, r24
     e08:	ec f7       	brge	.-6      	; 0xe04 <i2c_receiveData_ACK+0xa>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)    //Check value of TWI Status Register
     e0a:	80 91 71 00 	lds	r24, 0x0071
     e0e:	88 7f       	andi	r24, 0xF8	; 248
     e10:	80 35       	cpi	r24, 0x50	; 80
     e12:	19 f4       	brne	.+6      	; 0xe1a <i2c_receiveData_ACK+0x20>
   	  return(ERROR_CODE);
  
  data = TWDR;
     e14:	80 91 73 00 	lds	r24, 0x0073
  return(data);
     e18:	08 95       	ret
  TWCR = (1<<TWEA)|(1<<TWINT)|(1<<TWEN);
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_ACK)    //Check value of TWI Status Register
   	  return(ERROR_CODE);
     e1a:	8e e7       	ldi	r24, 0x7E	; 126
  
  data = TWDR;
  return(data);
}
     e1c:	08 95       	ret

00000e1e <i2c_receiveData_NACK>:
//******************************************************************
unsigned char i2c_receiveData_NACK(void)
{
  unsigned char data;
  
  TWCR = (1<<TWINT)|(1<<TWEN);
     e1e:	84 e8       	ldi	r24, 0x84	; 132
     e20:	80 93 74 00 	sts	0x0074, r24
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
     e24:	e4 e7       	ldi	r30, 0x74	; 116
     e26:	f0 e0       	ldi	r31, 0x00	; 0
     e28:	80 81       	ld	r24, Z
     e2a:	88 23       	and	r24, r24
     e2c:	ec f7       	brge	.-6      	; 0xe28 <i2c_receiveData_NACK+0xa>
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)    //Check value of TWI Status Register
     e2e:	80 91 71 00 	lds	r24, 0x0071
     e32:	88 7f       	andi	r24, 0xF8	; 248
     e34:	88 35       	cpi	r24, 0x58	; 88
     e36:	19 f4       	brne	.+6      	; 0xe3e <i2c_receiveData_NACK+0x20>
   	  return(ERROR_CODE);
  
  data = TWDR;
     e38:	80 91 73 00 	lds	r24, 0x0073
  return(data);
     e3c:	08 95       	ret
  TWCR = (1<<TWINT)|(1<<TWEN);
  
  while (!(TWCR & (1<<TWINT)));	   	   //Wait for TWINT flag set. This indicates that the
   		 		   					   //data has been received
  if ((TWSR & 0xF8) != MR_DATA_NACK)    //Check value of TWI Status Register
   	  return(ERROR_CODE);
     e3e:	8e e7       	ldi	r24, 0x7E	; 126
  
  data = TWDR;
  return(data);
}
     e40:	08 95       	ret

00000e42 <i2c_stop>:
//**************************************************
//Function to end the i2c communication
//*************************************************   	
void i2c_stop(void)
{
  TWCR =  (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);	  //Transmit STOP condition
     e42:	84 e9       	ldi	r24, 0x94	; 148
     e44:	80 93 74 00 	sts	0x0074, r24
}  
     e48:	08 95       	ret

00000e4a <RTC_setStartAddress>:
//***************************************************************************
void RTC_setStartAddress(void)
{
   unsigned char errorStatus;
   
   errorStatus = i2c_start();
     e4a:	0e 94 b0 06 	call	0xd60	; 0xd60 <i2c_start>
   if(errorStatus == 1)
     e4e:	81 30       	cpi	r24, 0x01	; 1
     e50:	39 f4       	brne	.+14     	; 0xe60 <RTC_setStartAddress+0x16>
   {
     transmitString_F(PSTR("RTC start1 failed.."));
     e52:	8f e7       	ldi	r24, 0x7F	; 127
     e54:	96 e0       	ldi	r25, 0x06	; 6
     e56:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
   	 i2c_stop();
     e5a:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return;
     e5e:	08 95       	ret
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
     e60:	80 ed       	ldi	r24, 0xD0	; 208
     e62:	0e 94 d0 06 	call	0xda0	; 0xda0 <i2c_sendAddress>
   
   if(errorStatus == 1)
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	39 f4       	brne	.+14     	; 0xe78 <RTC_setStartAddress+0x2e>
   {
     transmitString_F(PSTR("RTC sendAddress1 failed.."));
     e6a:	85 e6       	ldi	r24, 0x65	; 101
     e6c:	96 e0       	ldi	r25, 0x06	; 6
     e6e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	 i2c_stop();
     e72:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return;
     e76:	08 95       	ret
   } 
   
   errorStatus = i2c_sendData(0x00);
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <i2c_sendData>
   if(errorStatus == 1)
     e7e:	81 30       	cpi	r24, 0x01	; 1
     e80:	39 f4       	brne	.+14     	; 0xe90 <RTC_setStartAddress+0x46>
   {
     transmitString_F(PSTR("RTC write-2 failed.."));
     e82:	80 e5       	ldi	r24, 0x50	; 80
     e84:	96 e0       	ldi	r25, 0x06	; 6
     e86:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	 i2c_stop();
     e8a:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return;
     e8e:	08 95       	ret
   } 

   i2c_stop();
     e90:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
     e94:	08 95       	ret

00000e96 <RTC_read>:

//***********************************************************************
//Function to read RTC registers and store them in buffer rtc_register[]
//***********************************************************************    
void RTC_read(void)
{
     e96:	1f 93       	push	r17
     e98:	cf 93       	push	r28
     e9a:	df 93       	push	r29

  unsigned char errorStatus, i, data;
  
  errorStatus = i2c_start();
     e9c:	0e 94 b0 06 	call	0xd60	; 0xd60 <i2c_start>
   if(errorStatus == 1)
     ea0:	81 30       	cpi	r24, 0x01	; 1
     ea2:	39 f4       	brne	.+14     	; 0xeb2 <RTC_read+0x1c>
   {
     transmitString_F(PSTR("RTC start1 failed.."));
     ea4:	8c e3       	ldi	r24, 0x3C	; 60
     ea6:	96 e0       	ldi	r25, 0x06	; 6
     ea8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
   	 i2c_stop();
     eac:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return;
     eb0:	48 c0       	rjmp	.+144    	; 0xf42 <RTC_read+0xac>
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
     eb2:	80 ed       	ldi	r24, 0xD0	; 208
     eb4:	0e 94 d0 06 	call	0xda0	; 0xda0 <i2c_sendAddress>
   
   if(errorStatus == 1)
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	39 f4       	brne	.+14     	; 0xeca <RTC_read+0x34>
   {
     transmitString_F(PSTR("RTC sendAddress1 failed.."));
     ebc:	82 e2       	ldi	r24, 0x22	; 34
     ebe:	96 e0       	ldi	r25, 0x06	; 6
     ec0:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	 i2c_stop();
     ec4:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return;
     ec8:	3c c0       	rjmp	.+120    	; 0xf42 <RTC_read+0xac>
   } 
   
   errorStatus = i2c_sendData(0x00);
     eca:	80 e0       	ldi	r24, 0x00	; 0
     ecc:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <i2c_sendData>
   if(errorStatus == 1)
     ed0:	81 30       	cpi	r24, 0x01	; 1
     ed2:	39 f4       	brne	.+14     	; 0xee2 <RTC_read+0x4c>
   {
     transmitString_F(PSTR("RTC write-1 failed.."));
     ed4:	8d e0       	ldi	r24, 0x0D	; 13
     ed6:	96 e0       	ldi	r25, 0x06	; 6
     ed8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	 i2c_stop();
     edc:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return;
     ee0:	30 c0       	rjmp	.+96     	; 0xf42 <RTC_read+0xac>
   } 

    errorStatus = i2c_repeatStart();
     ee2:	0e 94 c0 06 	call	0xd80	; 0xd80 <i2c_repeatStart>
   if(errorStatus == 1)
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	39 f4       	brne	.+14     	; 0xef8 <RTC_read+0x62>
   {
     transmitString_F(PSTR("RTC repeat start failed.."));
     eea:	83 ef       	ldi	r24, 0xF3	; 243
     eec:	95 e0       	ldi	r25, 0x05	; 5
     eee:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
   	 i2c_stop();
     ef2:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return;
     ef6:	25 c0       	rjmp	.+74     	; 0xf42 <RTC_read+0xac>
   } 
   
    errorStatus = i2c_sendAddress(DS1307_R);
     ef8:	81 ed       	ldi	r24, 0xD1	; 209
     efa:	0e 94 d0 06 	call	0xda0	; 0xda0 <i2c_sendAddress>
   
   if(errorStatus == 1)
     efe:	81 30       	cpi	r24, 0x01	; 1
     f00:	39 f4       	brne	.+14     	; 0xf10 <RTC_read+0x7a>
   {
     transmitString_F(PSTR("RTC sendAddress2 failed.."));
     f02:	89 ed       	ldi	r24, 0xD9	; 217
     f04:	95 e0       	ldi	r25, 0x05	; 5
     f06:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	 i2c_stop();
     f0a:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return;
     f0e:	19 c0       	rjmp	.+50     	; 0xf42 <RTC_read+0xac>
     f10:	c0 e0       	ldi	r28, 0x00	; 0
     f12:	d1 e0       	ldi	r29, 0x01	; 1
	 return;
   } 
   
    errorStatus = i2c_sendAddress(DS1307_R);
   
   if(errorStatus == 1)
     f14:	10 e0       	ldi	r17, 0x00	; 0
	 return;
   } 
 
    for(i=0;i<7;i++)
   {
      if(i == 6)  	 //no Acknowledge after receiving the last byte
     f16:	16 30       	cpi	r17, 0x06	; 6
     f18:	19 f4       	brne	.+6      	; 0xf20 <RTC_read+0x8a>
	   	  data = i2c_receiveData_NACK();
     f1a:	0e 94 0f 07 	call	0xe1e	; 0xe1e <i2c_receiveData_NACK>
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <RTC_read+0x8e>
	  else
	  	  data = i2c_receiveData_ACK();
     f20:	0e 94 fd 06 	call	0xdfa	; 0xdfa <i2c_receiveData_ACK>
		  
   	  if(data == ERROR_CODE)
     f24:	8e 37       	cpi	r24, 0x7E	; 126
     f26:	39 f4       	brne	.+14     	; 0xf36 <RTC_read+0xa0>
   	  {
       		transmitString_F(PSTR("RTC receive failed.."));
     f28:	84 ec       	ldi	r24, 0xC4	; 196
     f2a:	95 e0       	ldi	r25, 0x05	; 5
     f2c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
			i2c_stop();
     f30:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	   		return;
     f34:	06 c0       	rjmp	.+12     	; 0xf42 <RTC_read+0xac>
   	  }
	  
	  rtc_register[i] = data;
     f36:	89 93       	st	Y+, r24
     transmitString_F(PSTR("RTC sendAddress2 failed.."));
	 i2c_stop();
	 return;
   } 
 
    for(i=0;i<7;i++)
     f38:	1f 5f       	subi	r17, 0xFF	; 255
     f3a:	17 30       	cpi	r17, 0x07	; 7
     f3c:	61 f7       	brne	.-40     	; 0xf16 <RTC_read+0x80>
   	  }
	  
	  rtc_register[i] = data;
	}
	
	i2c_stop();
     f3e:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
}	  
     f42:	df 91       	pop	r29
     f44:	cf 91       	pop	r28
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <RTC_getTime>:
//******************************************************************
//Function to form time string for sending it to LCD & UART
//****************************************************************** 
void RTC_getTime(void)
{
   RTC_read();
     f4a:	0e 94 4b 07 	call	0xe96	; 0xe96 <RTC_read>
   time[8] = 0x00;	  //NIL
     f4e:	10 92 0f 01 	sts	0x010F, r1
   time[7] = (SECONDS & 0x0f) | 0x30;		//seconds(1's)
     f52:	80 91 00 01 	lds	r24, 0x0100
     f56:	98 2f       	mov	r25, r24
     f58:	9f 70       	andi	r25, 0x0F	; 15
     f5a:	90 63       	ori	r25, 0x30	; 48
     f5c:	90 93 0e 01 	sts	0x010E, r25
   time[6] = ((SECONDS & 0x70) >> 4) | 0x30;		//seconds(10's)
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	80 77       	andi	r24, 0x70	; 112
     f64:	90 70       	andi	r25, 0x00	; 0
     f66:	95 95       	asr	r25
     f68:	87 95       	ror	r24
     f6a:	95 95       	asr	r25
     f6c:	87 95       	ror	r24
     f6e:	95 95       	asr	r25
     f70:	87 95       	ror	r24
     f72:	95 95       	asr	r25
     f74:	87 95       	ror	r24
     f76:	80 63       	ori	r24, 0x30	; 48
     f78:	80 93 0d 01 	sts	0x010D, r24
   time[5] = ':';
     f7c:	2a e3       	ldi	r18, 0x3A	; 58
     f7e:	20 93 0c 01 	sts	0x010C, r18
   
   time[4] = (MINUTES & 0x0f) | 0x30;
     f82:	80 91 01 01 	lds	r24, 0x0101
     f86:	98 2f       	mov	r25, r24
     f88:	9f 70       	andi	r25, 0x0F	; 15
     f8a:	90 63       	ori	r25, 0x30	; 48
     f8c:	90 93 0b 01 	sts	0x010B, r25
   time[3] = ((MINUTES & 0x70) >> 4) | 0x30;
     f90:	90 e0       	ldi	r25, 0x00	; 0
     f92:	80 77       	andi	r24, 0x70	; 112
     f94:	90 70       	andi	r25, 0x00	; 0
     f96:	95 95       	asr	r25
     f98:	87 95       	ror	r24
     f9a:	95 95       	asr	r25
     f9c:	87 95       	ror	r24
     f9e:	95 95       	asr	r25
     fa0:	87 95       	ror	r24
     fa2:	95 95       	asr	r25
     fa4:	87 95       	ror	r24
     fa6:	80 63       	ori	r24, 0x30	; 48
     fa8:	80 93 0a 01 	sts	0x010A, r24
   time[2] = ':'; 
     fac:	20 93 09 01 	sts	0x0109, r18
   
   time[1] = (HOURS & 0x0f) | 0x30;	
     fb0:	80 91 02 01 	lds	r24, 0x0102
     fb4:	98 2f       	mov	r25, r24
     fb6:	9f 70       	andi	r25, 0x0F	; 15
     fb8:	90 63       	ori	r25, 0x30	; 48
     fba:	90 93 08 01 	sts	0x0108, r25
   time[0] = ((HOURS & 0x30) >> 4) | 0x30;
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	80 73       	andi	r24, 0x30	; 48
     fc2:	90 70       	andi	r25, 0x00	; 0
     fc4:	95 95       	asr	r25
     fc6:	87 95       	ror	r24
     fc8:	95 95       	asr	r25
     fca:	87 95       	ror	r24
     fcc:	95 95       	asr	r25
     fce:	87 95       	ror	r24
     fd0:	95 95       	asr	r25
     fd2:	87 95       	ror	r24
     fd4:	80 63       	ori	r24, 0x30	; 48
     fd6:	80 93 07 01 	sts	0x0107, r24
}
     fda:	08 95       	ret

00000fdc <RTC_getDate>:
//******************************************************************
//Function to form date string for sending it to LCD & UART
//****************************************************************** 
void RTC_getDate(void)
{
  RTC_read();
     fdc:	0e 94 4b 07 	call	0xe96	; 0xe96 <RTC_read>
  date[11] = 0x00;
     fe0:	10 92 1d 01 	sts	0x011D, r1
  date[10] = 0x00;
     fe4:	10 92 1c 01 	sts	0x011C, r1
  date[9] = (YEAR & 0x0f) | 0x30;
     fe8:	80 91 06 01 	lds	r24, 0x0106
     fec:	98 2f       	mov	r25, r24
     fee:	9f 70       	andi	r25, 0x0F	; 15
     ff0:	90 63       	ori	r25, 0x30	; 48
     ff2:	90 93 1b 01 	sts	0x011B, r25
  date[8] = ((YEAR & 0xf0) >> 4) | 0x30;
     ff6:	82 95       	swap	r24
     ff8:	8f 70       	andi	r24, 0x0F	; 15
     ffa:	80 63       	ori	r24, 0x30	; 48
     ffc:	80 93 1a 01 	sts	0x011A, r24
  date[7] = '0';
    1000:	80 e3       	ldi	r24, 0x30	; 48
    1002:	80 93 19 01 	sts	0x0119, r24
  date[6] = '2';
    1006:	82 e3       	ldi	r24, 0x32	; 50
    1008:	80 93 18 01 	sts	0x0118, r24
  date[5] = '/';
    100c:	2f e2       	ldi	r18, 0x2F	; 47
    100e:	20 93 17 01 	sts	0x0117, r18
  date[4] = (MONTH & 0x0f) | 0x30;
    1012:	80 91 05 01 	lds	r24, 0x0105
    1016:	98 2f       	mov	r25, r24
    1018:	9f 70       	andi	r25, 0x0F	; 15
    101a:	90 63       	ori	r25, 0x30	; 48
    101c:	90 93 16 01 	sts	0x0116, r25
  date[3] = ((MONTH & 0x10) >> 4) | 0x30;
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	80 71       	andi	r24, 0x10	; 16
    1024:	90 70       	andi	r25, 0x00	; 0
    1026:	95 95       	asr	r25
    1028:	87 95       	ror	r24
    102a:	95 95       	asr	r25
    102c:	87 95       	ror	r24
    102e:	95 95       	asr	r25
    1030:	87 95       	ror	r24
    1032:	95 95       	asr	r25
    1034:	87 95       	ror	r24
    1036:	80 63       	ori	r24, 0x30	; 48
    1038:	80 93 15 01 	sts	0x0115, r24
  date[2] = '/';
    103c:	20 93 14 01 	sts	0x0114, r18
  date[1] = (DATE & 0x0f) | 0x30;
    1040:	80 91 04 01 	lds	r24, 0x0104
    1044:	98 2f       	mov	r25, r24
    1046:	9f 70       	andi	r25, 0x0F	; 15
    1048:	90 63       	ori	r25, 0x30	; 48
    104a:	90 93 13 01 	sts	0x0113, r25
  date[0] = ((DATE & 0x30) >> 4) | 0x30;
    104e:	90 e0       	ldi	r25, 0x00	; 0
    1050:	80 73       	andi	r24, 0x30	; 48
    1052:	90 70       	andi	r25, 0x00	; 0
    1054:	95 95       	asr	r25
    1056:	87 95       	ror	r24
    1058:	95 95       	asr	r25
    105a:	87 95       	ror	r24
    105c:	95 95       	asr	r25
    105e:	87 95       	ror	r24
    1060:	95 95       	asr	r25
    1062:	87 95       	ror	r24
    1064:	80 63       	ori	r24, 0x30	; 48
    1066:	80 93 12 01 	sts	0x0112, r24
}  
    106a:	08 95       	ret

0000106c <RTC_displayTime>:
//******************************************************************
//Function to display time on LCD and send it to PC (thru UART)
//****************************************************************** 
void RTC_displayTime(void)
{
  RTC_getTime();
    106c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <RTC_getTime>
 
  TX_NEWLINE;
    1070:	8d e0       	ldi	r24, 0x0D	; 13
    1072:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
    1076:	8a e0       	ldi	r24, 0x0A	; 10
    1078:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
  transmitString_F(PSTR("Time:")); 
    107c:	8e eb       	ldi	r24, 0xBE	; 190
    107e:	95 e0       	ldi	r25, 0x05	; 5
    1080:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
  transmitString(time);     
    1084:	87 e0       	ldi	r24, 0x07	; 7
    1086:	91 e0       	ldi	r25, 0x01	; 1
    1088:	0e 94 10 0b 	call	0x1620	; 0x1620 <transmitString>
}
    108c:	08 95       	ret

0000108e <RTC_displayDay>:
//******************************************************************
//Function to get the string for day 
//****************************************************************** 
void RTC_displayDay(void)
{
  transmitString_F(PSTR("    Day: "));
    108e:	8e ea       	ldi	r24, 0xAE	; 174
    1090:	95 e0       	ldi	r25, 0x05	; 5
    1092:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
  
  switch(DAY)
    1096:	80 91 03 01 	lds	r24, 0x0103
    109a:	83 30       	cpi	r24, 0x03	; 3
    109c:	e9 f0       	breq	.+58     	; 0x10d8 <RTC_displayDay+0x4a>
    109e:	84 30       	cpi	r24, 0x04	; 4
    10a0:	28 f4       	brcc	.+10     	; 0x10ac <RTC_displayDay+0x1e>
    10a2:	81 30       	cpi	r24, 0x01	; 1
    10a4:	79 f0       	breq	.+30     	; 0x10c4 <RTC_displayDay+0x36>
    10a6:	82 30       	cpi	r24, 0x02	; 2
    10a8:	90 f4       	brcc	.+36     	; 0x10ce <RTC_displayDay+0x40>
    10aa:	07 c0       	rjmp	.+14     	; 0x10ba <RTC_displayDay+0x2c>
    10ac:	85 30       	cpi	r24, 0x05	; 5
    10ae:	f1 f0       	breq	.+60     	; 0x10ec <RTC_displayDay+0x5e>
    10b0:	85 30       	cpi	r24, 0x05	; 5
    10b2:	b8 f0       	brcs	.+46     	; 0x10e2 <RTC_displayDay+0x54>
    10b4:	86 30       	cpi	r24, 0x06	; 6
    10b6:	21 f5       	brne	.+72     	; 0x1100 <__stack+0x1>
    10b8:	1e c0       	rjmp	.+60     	; 0x10f6 <RTC_displayDay+0x68>
  {
   case 0:transmitString_F(PSTR("Sunday"));
    10ba:	87 ea       	ldi	r24, 0xA7	; 167
    10bc:	95 e0       	ldi	r25, 0x05	; 5
    10be:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
          break; 
    10c2:	08 95       	ret
   case 1:transmitString_F(PSTR("Monday"));
    10c4:	80 ea       	ldi	r24, 0xA0	; 160
    10c6:	95 e0       	ldi	r25, 0x05	; 5
    10c8:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
          break; 
    10cc:	08 95       	ret
   case 2:transmitString_F(PSTR("Tuesday"));
    10ce:	88 e9       	ldi	r24, 0x98	; 152
    10d0:	95 e0       	ldi	r25, 0x05	; 5
    10d2:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
          break; 
    10d6:	08 95       	ret
   case 3:transmitString_F(PSTR("Wednesday"));
    10d8:	8e e8       	ldi	r24, 0x8E	; 142
    10da:	95 e0       	ldi	r25, 0x05	; 5
    10dc:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
          break; 
    10e0:	08 95       	ret
   case 4:transmitString_F(PSTR("Thursday"));
    10e2:	85 e8       	ldi	r24, 0x85	; 133
    10e4:	95 e0       	ldi	r25, 0x05	; 5
    10e6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
          break; 		  
    10ea:	08 95       	ret
   case 5:transmitString_F(PSTR("Friday"));
    10ec:	8e e7       	ldi	r24, 0x7E	; 126
    10ee:	95 e0       	ldi	r25, 0x05	; 5
    10f0:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
          break; 		  
    10f4:	08 95       	ret
   case 6:transmitString_F(PSTR("Saturday"));
    10f6:	85 e7       	ldi	r24, 0x75	; 117
    10f8:	95 e0       	ldi	r25, 0x05	; 5
    10fa:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
          break; 
    10fe:	08 95       	ret
   default:	transmitString_F(PSTR("Unknown"));  
    1100:	8d e6       	ldi	r24, 0x6D	; 109
    1102:	95 e0       	ldi	r25, 0x05	; 5
    1104:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
    1108:	08 95       	ret

0000110a <RTC_displayDate>:
//******************************************************************
//Function to display date on LCD and send it to PC (UART)
//****************************************************************** 
void RTC_displayDate(void)
{
  RTC_getDate();
    110a:	0e 94 ee 07 	call	0xfdc	; 0xfdc <RTC_getDate>
  TX_NEWLINE;
    110e:	8d e0       	ldi	r24, 0x0D	; 13
    1110:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
    1114:	8a e0       	ldi	r24, 0x0A	; 10
    1116:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
  transmitString_F(PSTR("Date:")); 
    111a:	88 eb       	ldi	r24, 0xB8	; 184
    111c:	95 e0       	ldi	r25, 0x05	; 5
    111e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
  transmitString(date);  
    1122:	82 e1       	ldi	r24, 0x12	; 18
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	0e 94 10 0b 	call	0x1620	; 0x1620 <transmitString>
  RTC_displayDay();   
    112a:	0e 94 47 08 	call	0x108e	; 0x108e <RTC_displayDay>
}
    112e:	08 95       	ret

00001130 <RTC_updateRegisters>:
//******************************************************************
//Function to update buffer rtc_register[] for next writing to RTC
//****************************************************************** 
void RTC_updateRegisters(void)
{
  SECONDS = ((time[6] & 0x07) << 4) | (time[7] & 0x0f);
    1130:	80 91 0d 01 	lds	r24, 0x010D
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	87 70       	andi	r24, 0x07	; 7
    1138:	90 70       	andi	r25, 0x00	; 0
    113a:	82 95       	swap	r24
    113c:	92 95       	swap	r25
    113e:	90 7f       	andi	r25, 0xF0	; 240
    1140:	98 27       	eor	r25, r24
    1142:	80 7f       	andi	r24, 0xF0	; 240
    1144:	98 27       	eor	r25, r24
    1146:	20 91 0e 01 	lds	r18, 0x010E
    114a:	2f 70       	andi	r18, 0x0F	; 15
    114c:	82 2b       	or	r24, r18
    114e:	80 93 00 01 	sts	0x0100, r24
  MINUTES = ((time[3] & 0x07) << 4) | (time[4] & 0x0f);
    1152:	80 91 0a 01 	lds	r24, 0x010A
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	87 70       	andi	r24, 0x07	; 7
    115a:	90 70       	andi	r25, 0x00	; 0
    115c:	82 95       	swap	r24
    115e:	92 95       	swap	r25
    1160:	90 7f       	andi	r25, 0xF0	; 240
    1162:	98 27       	eor	r25, r24
    1164:	80 7f       	andi	r24, 0xF0	; 240
    1166:	98 27       	eor	r25, r24
    1168:	20 91 0b 01 	lds	r18, 0x010B
    116c:	2f 70       	andi	r18, 0x0F	; 15
    116e:	82 2b       	or	r24, r18
    1170:	80 93 01 01 	sts	0x0101, r24
  HOURS = ((time[0] & 0x03) << 4) | (time[1] & 0x0f);  
    1174:	e7 e0       	ldi	r30, 0x07	; 7
    1176:	f1 e0       	ldi	r31, 0x01	; 1
    1178:	80 81       	ld	r24, Z
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	83 70       	andi	r24, 0x03	; 3
    117e:	90 70       	andi	r25, 0x00	; 0
    1180:	82 95       	swap	r24
    1182:	92 95       	swap	r25
    1184:	90 7f       	andi	r25, 0xF0	; 240
    1186:	98 27       	eor	r25, r24
    1188:	80 7f       	andi	r24, 0xF0	; 240
    118a:	98 27       	eor	r25, r24
    118c:	21 81       	ldd	r18, Z+1	; 0x01
    118e:	2f 70       	andi	r18, 0x0F	; 15
    1190:	82 2b       	or	r24, r18
    1192:	80 93 02 01 	sts	0x0102, r24
  DAY = date[10];
    1196:	80 91 1c 01 	lds	r24, 0x011C
    119a:	80 93 03 01 	sts	0x0103, r24
  DATE = ((date[0] & 0x03) << 4) | (date[1] & 0x0f);
    119e:	e2 e1       	ldi	r30, 0x12	; 18
    11a0:	f1 e0       	ldi	r31, 0x01	; 1
    11a2:	80 81       	ld	r24, Z
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	83 70       	andi	r24, 0x03	; 3
    11a8:	90 70       	andi	r25, 0x00	; 0
    11aa:	82 95       	swap	r24
    11ac:	92 95       	swap	r25
    11ae:	90 7f       	andi	r25, 0xF0	; 240
    11b0:	98 27       	eor	r25, r24
    11b2:	80 7f       	andi	r24, 0xF0	; 240
    11b4:	98 27       	eor	r25, r24
    11b6:	21 81       	ldd	r18, Z+1	; 0x01
    11b8:	2f 70       	andi	r18, 0x0F	; 15
    11ba:	82 2b       	or	r24, r18
    11bc:	80 93 04 01 	sts	0x0104, r24
  MONTH = ((date[3] & 0x01) << 4) | (date[4] & 0x0f);
    11c0:	83 81       	ldd	r24, Z+3	; 0x03
    11c2:	90 e0       	ldi	r25, 0x00	; 0
    11c4:	81 70       	andi	r24, 0x01	; 1
    11c6:	90 70       	andi	r25, 0x00	; 0
    11c8:	82 95       	swap	r24
    11ca:	92 95       	swap	r25
    11cc:	90 7f       	andi	r25, 0xF0	; 240
    11ce:	98 27       	eor	r25, r24
    11d0:	80 7f       	andi	r24, 0xF0	; 240
    11d2:	98 27       	eor	r25, r24
    11d4:	24 81       	ldd	r18, Z+4	; 0x04
    11d6:	2f 70       	andi	r18, 0x0F	; 15
    11d8:	82 2b       	or	r24, r18
    11da:	80 93 05 01 	sts	0x0105, r24
  YEAR = ((date[8] & 0x0f) << 4) | (date[9] & 0x0f);
    11de:	90 85       	ldd	r25, Z+8	; 0x08
    11e0:	92 95       	swap	r25
    11e2:	90 7f       	andi	r25, 0xF0	; 240
    11e4:	81 85       	ldd	r24, Z+9	; 0x09
    11e6:	8f 70       	andi	r24, 0x0F	; 15
    11e8:	89 2b       	or	r24, r25
    11ea:	80 93 06 01 	sts	0x0106, r24
}  
    11ee:	08 95       	ret

000011f0 <RTC_writeTime>:

//******************************************************************
//Function to write new time in the RTC 
//******************************************************************   
unsigned char RTC_writeTime(void)
{
    11f0:	0f 93       	push	r16
    11f2:	1f 93       	push	r17
    11f4:	cf 93       	push	r28
    11f6:	df 93       	push	r29
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
    11f8:	0e 94 b0 06 	call	0xd60	; 0xd60 <i2c_start>
   if(errorStatus == 1)
    11fc:	81 30       	cpi	r24, 0x01	; 1
    11fe:	41 f4       	brne	.+16     	; 0x1210 <RTC_writeTime+0x20>
   {
     transmitString_F(PSTR("RTC start1 failed.."));
    1200:	89 e5       	ldi	r24, 0x59	; 89
    1202:	95 e0       	ldi	r25, 0x05	; 5
    1204:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
   	 i2c_stop();
    1208:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return(1);
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	32 c0       	rjmp	.+100    	; 0x1274 <RTC_writeTime+0x84>
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    1210:	80 ed       	ldi	r24, 0xD0	; 208
    1212:	0e 94 d0 06 	call	0xda0	; 0xda0 <i2c_sendAddress>
   
   if(errorStatus == 1)
    1216:	81 30       	cpi	r24, 0x01	; 1
    1218:	41 f4       	brne	.+16     	; 0x122a <RTC_writeTime+0x3a>
   {
     transmitString_F(PSTR("RTC sendAddress1 failed.."));
    121a:	8f e3       	ldi	r24, 0x3F	; 63
    121c:	95 e0       	ldi	r25, 0x05	; 5
    121e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	 i2c_stop();
    1222:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return(1);
    1226:	81 e0       	ldi	r24, 0x01	; 1
    1228:	25 c0       	rjmp	.+74     	; 0x1274 <RTC_writeTime+0x84>
   } 
   
   errorStatus = i2c_sendData(0x00);
    122a:	80 e0       	ldi	r24, 0x00	; 0
    122c:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <i2c_sendData>
   if(errorStatus == 1)
    1230:	81 30       	cpi	r24, 0x01	; 1
    1232:	41 f4       	brne	.+16     	; 0x1244 <RTC_writeTime+0x54>
   {
     transmitString_F(PSTR("RTC write-1 failed.."));
    1234:	8a e2       	ldi	r24, 0x2A	; 42
    1236:	95 e0       	ldi	r25, 0x05	; 5
    1238:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	 i2c_stop();
    123c:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return(1);
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	18 c0       	rjmp	.+48     	; 0x1274 <RTC_writeTime+0x84>
    1244:	c0 e0       	ldi	r28, 0x00	; 0
    1246:	d1 e0       	ldi	r29, 0x01	; 1


//******************************************************************
//Function to write new time in the RTC 
//******************************************************************   
unsigned char RTC_writeTime(void)
    1248:	8e 01       	movw	r16, r28
    124a:	0d 5f       	subi	r16, 0xFD	; 253
    124c:	1f 4f       	sbci	r17, 0xFF	; 255
	 return(1);
   } 

    for(i=0;i<3;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    124e:	89 91       	ld	r24, Y+
    1250:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <i2c_sendData>
   	  if(errorStatus == 1)
    1254:	81 30       	cpi	r24, 0x01	; 1
    1256:	41 f4       	brne	.+16     	; 0x1268 <RTC_writeTime+0x78>
   	  {
       		transmitString_F(PSTR("RTC write time failed.."));
    1258:	82 e1       	ldi	r24, 0x12	; 18
    125a:	95 e0       	ldi	r25, 0x05	; 5
    125c:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
			i2c_stop();
    1260:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	   		return(1);
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	06 c0       	rjmp	.+12     	; 0x1274 <RTC_writeTime+0x84>
     transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return(1);
   } 

    for(i=0;i<3;i++)
    1268:	c0 17       	cp	r28, r16
    126a:	d1 07       	cpc	r29, r17
    126c:	81 f7       	brne	.-32     	; 0x124e <RTC_writeTime+0x5e>
			i2c_stop();
	   		return(1);
   	  }
    }
	
	i2c_stop();
    126e:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	return(0);
    1272:	80 e0       	ldi	r24, 0x00	; 0
}
    1274:	df 91       	pop	r29
    1276:	cf 91       	pop	r28
    1278:	1f 91       	pop	r17
    127a:	0f 91       	pop	r16
    127c:	08 95       	ret

0000127e <RTC_writeDate>:

//******************************************************************
//Function to write new date in the RTC
//******************************************************************   
unsigned char RTC_writeDate(void)
{
    127e:	0f 93       	push	r16
    1280:	1f 93       	push	r17
    1282:	cf 93       	push	r28
    1284:	df 93       	push	r29
  unsigned char errorStatus, i;
  
   errorStatus = i2c_start();
    1286:	0e 94 b0 06 	call	0xd60	; 0xd60 <i2c_start>
   if(errorStatus == 1)
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	41 f4       	brne	.+16     	; 0x129e <RTC_writeDate+0x20>
   {
     transmitString_F(PSTR("RTC start1 failed.."));
    128e:	8e ef       	ldi	r24, 0xFE	; 254
    1290:	94 e0       	ldi	r25, 0x04	; 4
    1292:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
   	 i2c_stop();
    1296:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return(1);
    129a:	81 e0       	ldi	r24, 0x01	; 1
    129c:	32 c0       	rjmp	.+100    	; 0x1302 <RTC_writeDate+0x84>
   } 
   
   errorStatus = i2c_sendAddress(DS1307_W);
    129e:	80 ed       	ldi	r24, 0xD0	; 208
    12a0:	0e 94 d0 06 	call	0xda0	; 0xda0 <i2c_sendAddress>
   
   if(errorStatus == 1)
    12a4:	81 30       	cpi	r24, 0x01	; 1
    12a6:	41 f4       	brne	.+16     	; 0x12b8 <RTC_writeDate+0x3a>
   {
     transmitString_F(PSTR("RTC sendAddress1 failed.."));
    12a8:	84 ee       	ldi	r24, 0xE4	; 228
    12aa:	94 e0       	ldi	r25, 0x04	; 4
    12ac:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	 i2c_stop();
    12b0:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return(1);
    12b4:	81 e0       	ldi	r24, 0x01	; 1
    12b6:	25 c0       	rjmp	.+74     	; 0x1302 <RTC_writeDate+0x84>
   } 
   
   errorStatus = i2c_sendData(0x03);
    12b8:	83 e0       	ldi	r24, 0x03	; 3
    12ba:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <i2c_sendData>
   if(errorStatus == 1)
    12be:	81 30       	cpi	r24, 0x01	; 1
    12c0:	41 f4       	brne	.+16     	; 0x12d2 <RTC_writeDate+0x54>
   {
     transmitString_F(PSTR("RTC write-1 failed.."));
    12c2:	8f ec       	ldi	r24, 0xCF	; 207
    12c4:	94 e0       	ldi	r25, 0x04	; 4
    12c6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	 i2c_stop();
    12ca:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	 return(1);
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	18 c0       	rjmp	.+48     	; 0x1302 <RTC_writeDate+0x84>
    12d2:	c3 e0       	ldi	r28, 0x03	; 3
    12d4:	d1 e0       	ldi	r29, 0x01	; 1


//******************************************************************
//Function to write new date in the RTC
//******************************************************************   
unsigned char RTC_writeDate(void)
    12d6:	8e 01       	movw	r16, r28
    12d8:	0c 5f       	subi	r16, 0xFC	; 252
    12da:	1f 4f       	sbci	r17, 0xFF	; 255
	 return(1);
   } 

    for(i=3;i<7;i++)
    {
	  errorStatus = i2c_sendData(rtc_register[i]);  
    12dc:	89 91       	ld	r24, Y+
    12de:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <i2c_sendData>
   	  if(errorStatus == 1)
    12e2:	81 30       	cpi	r24, 0x01	; 1
    12e4:	41 f4       	brne	.+16     	; 0x12f6 <RTC_writeDate+0x78>
   	  {
       		transmitString_F(PSTR("RTC write date failed.."));
    12e6:	87 eb       	ldi	r24, 0xB7	; 183
    12e8:	94 e0       	ldi	r25, 0x04	; 4
    12ea:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
			i2c_stop();
    12ee:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	   		return(1);
    12f2:	81 e0       	ldi	r24, 0x01	; 1
    12f4:	06 c0       	rjmp	.+12     	; 0x1302 <RTC_writeDate+0x84>
     transmitString_F(PSTR("RTC write-1 failed.."));
	 i2c_stop();
	 return(1);
   } 

    for(i=3;i<7;i++)
    12f6:	c0 17       	cp	r28, r16
    12f8:	d1 07       	cpc	r29, r17
    12fa:	81 f7       	brne	.-32     	; 0x12dc <RTC_writeDate+0x5e>
			i2c_stop();
	   		return(1);
   	  }
    }
	
	i2c_stop();
    12fc:	0e 94 21 07 	call	0xe42	; 0xe42 <i2c_stop>
	return(0);
    1300:	80 e0       	ldi	r24, 0x00	; 0
}
    1302:	df 91       	pop	r29
    1304:	cf 91       	pop	r28
    1306:	1f 91       	pop	r17
    1308:	0f 91       	pop	r16
    130a:	08 95       	ret

0000130c <RTC_updateTime>:
  
//******************************************************************
//Function to update RTC time by entering it at hyper terminal
//******************************************************************   
void RTC_updateTime(void)
{
    130c:	1f 93       	push	r17
  unsigned char data;
  TX_NEWLINE;
    130e:	8d e0       	ldi	r24, 0x0D	; 13
    1310:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
    1314:	8a e0       	ldi	r24, 0x0A	; 10
    1316:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
  transmitString_F(PSTR("Enter Time in 24h format(hh:mm:ss):")); 
    131a:	83 e9       	ldi	r24, 0x93	; 147
    131c:	94 e0       	ldi	r25, 0x04	; 4
    131e:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
  
    data = receiveByte(); 	   	  	  				//receive hours
    1322:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
    1326:	18 2f       	mov	r17, r24
	transmitByte(data);
    1328:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
	if(data < 0x30 || data > 0x32)
    132c:	81 2f       	mov	r24, r17
    132e:	80 53       	subi	r24, 0x30	; 48
    1330:	83 30       	cpi	r24, 0x03	; 3
    1332:	08 f0       	brcs	.+2      	; 0x1336 <RTC_updateTime+0x2a>
    1334:	6a c0       	rjmp	.+212    	; 0x140a <RTC_updateTime+0xfe>
	   goto TIME_ERROR;
	   
	time[0]= data;
    1336:	10 93 07 01 	sts	0x0107, r17
	 
	data = receiveByte();
    133a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
    133e:	18 2f       	mov	r17, r24
	transmitByte(data);
    1340:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
	if(data < 0x30 || data > 0x39)
    1344:	81 2f       	mov	r24, r17
    1346:	80 53       	subi	r24, 0x30	; 48
    1348:	8a 30       	cpi	r24, 0x0A	; 10
    134a:	08 f0       	brcs	.+2      	; 0x134e <RTC_updateTime+0x42>
    134c:	5e c0       	rjmp	.+188    	; 0x140a <RTC_updateTime+0xfe>
	   goto TIME_ERROR;
	 
	time[1]= data;
    134e:	10 93 08 01 	sts	0x0108, r17
	
	transmitByte(':');
    1352:	8a e3       	ldi	r24, 0x3A	; 58
    1354:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
	
	if(((time[1] & 0x0f) + ((time[0] & 0x03)*10)) > 23)
    1358:	80 91 07 01 	lds	r24, 0x0107
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	83 70       	andi	r24, 0x03	; 3
    1360:	90 70       	andi	r25, 0x00	; 0
    1362:	9c 01       	movw	r18, r24
    1364:	22 0f       	add	r18, r18
    1366:	33 1f       	adc	r19, r19
    1368:	88 0f       	add	r24, r24
    136a:	99 1f       	adc	r25, r25
    136c:	88 0f       	add	r24, r24
    136e:	99 1f       	adc	r25, r25
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	82 0f       	add	r24, r18
    1376:	93 1f       	adc	r25, r19
    1378:	20 91 08 01 	lds	r18, 0x0108
    137c:	2f 70       	andi	r18, 0x0F	; 15
    137e:	82 0f       	add	r24, r18
    1380:	91 1d       	adc	r25, r1
    1382:	88 31       	cpi	r24, 0x18	; 24
    1384:	91 05       	cpc	r25, r1
    1386:	0c f0       	brlt	.+2      	; 0x138a <RTC_updateTime+0x7e>
    1388:	40 c0       	rjmp	.+128    	; 0x140a <RTC_updateTime+0xfe>
	   goto TIME_ERROR;
	 
	 data = receiveByte();			   			  //receive minutes
    138a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
    138e:	18 2f       	mov	r17, r24
	 transmitByte(data);
    1390:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
	if(data < 0x30 || data > 0x35)
    1394:	81 2f       	mov	r24, r17
    1396:	80 53       	subi	r24, 0x30	; 48
    1398:	86 30       	cpi	r24, 0x06	; 6
    139a:	b8 f5       	brcc	.+110    	; 0x140a <RTC_updateTime+0xfe>
	   goto TIME_ERROR;
	   
	time[3]= data; 
    139c:	10 93 0a 01 	sts	0x010A, r17
	
	data = receiveByte();
    13a0:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
    13a4:	18 2f       	mov	r17, r24
	transmitByte(data);
    13a6:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
	if(data < 0x30 || data > 0x39)
    13aa:	81 2f       	mov	r24, r17
    13ac:	80 53       	subi	r24, 0x30	; 48
    13ae:	8a 30       	cpi	r24, 0x0A	; 10
    13b0:	60 f5       	brcc	.+88     	; 0x140a <RTC_updateTime+0xfe>
	   goto TIME_ERROR;
	   
	time[4]= data; 
    13b2:	10 93 0b 01 	sts	0x010B, r17
	
	transmitByte(':');
    13b6:	8a e3       	ldi	r24, 0x3A	; 58
    13b8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
	
	 data = receiveByte();			   			  //receive seconds
    13bc:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
    13c0:	18 2f       	mov	r17, r24
	 transmitByte(data);
    13c2:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
	if(data < 0x30 || data > 0x35)
    13c6:	81 2f       	mov	r24, r17
    13c8:	80 53       	subi	r24, 0x30	; 48
    13ca:	86 30       	cpi	r24, 0x06	; 6
    13cc:	f0 f4       	brcc	.+60     	; 0x140a <RTC_updateTime+0xfe>
	   goto TIME_ERROR;
	   
	time[6]= data; 
    13ce:	10 93 0d 01 	sts	0x010D, r17
	
	data = receiveByte();
    13d2:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
    13d6:	18 2f       	mov	r17, r24
	transmitByte(data);
    13d8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
	if(data < 0x30 || data > 0x39)
    13dc:	81 2f       	mov	r24, r17
    13de:	80 53       	subi	r24, 0x30	; 48
    13e0:	8a 30       	cpi	r24, 0x0A	; 10
    13e2:	98 f4       	brcc	.+38     	; 0x140a <RTC_updateTime+0xfe>
	   goto TIME_ERROR;
	   
	time[7]= data; 
    13e4:	10 93 0e 01 	sts	0x010E, r17
	
	 	  
  RTC_updateRegisters(); 
    13e8:	0e 94 98 08 	call	0x1130	; 0x1130 <RTC_updateRegisters>
  data = RTC_writeTime();
    13ec:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <RTC_writeTime>
  
  if(data == 0)
    13f0:	88 23       	and	r24, r24
    13f2:	a9 f4       	brne	.+42     	; 0x141e <RTC_updateTime+0x112>
  {
     TX_NEWLINE;
    13f4:	8d e0       	ldi	r24, 0x0D	; 13
    13f6:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
    13fa:	8a e0       	ldi	r24, 0x0A	; 10
    13fc:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
  	 transmitString_F(PSTR("Time Updated sucessfully..")); 
    1400:	88 e7       	ldi	r24, 0x78	; 120
    1402:	94 e0       	ldi	r25, 0x04	; 4
    1404:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
    1408:	0a c0       	rjmp	.+20     	; 0x141e <RTC_updateTime+0x112>
  }	  
  return;
  
TIME_ERROR:

  TX_NEWLINE;
    140a:	8d e0       	ldi	r24, 0x0D	; 13
    140c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
    1410:	8a e0       	ldi	r24, 0x0A	; 10
    1412:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
  transmitString_F(PSTR("Invalid Entry..")); 
    1416:	88 e6       	ldi	r24, 0x68	; 104
    1418:	94 e0       	ldi	r25, 0x04	; 4
    141a:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
  return;
}  
    141e:	1f 91       	pop	r17
    1420:	08 95       	ret

00001422 <RTC_updateDate>:
  
//******************************************************************
//Function to update RTC date by entering it at hyper terminal
//******************************************************************   
void RTC_updateDate(void)
{
    1422:	1f 93       	push	r17
  unsigned char data;
  TX_NEWLINE;
    1424:	8d e0       	ldi	r24, 0x0D	; 13
    1426:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
    142a:	8a e0       	ldi	r24, 0x0A	; 10
    142c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
  transmitString_F(PSTR("Enter Date (dd/mm/yy):")); 
    1430:	81 e5       	ldi	r24, 0x51	; 81
    1432:	94 e0       	ldi	r25, 0x04	; 4
    1434:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
  
    data = receiveByte(); 	   				  		//receive date
    1438:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
    143c:	18 2f       	mov	r17, r24
	transmitByte(data); 	   	  	  				
    143e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
	if(data < 0x30 || data > 0x33)
    1442:	81 2f       	mov	r24, r17
    1444:	80 53       	subi	r24, 0x30	; 48
    1446:	84 30       	cpi	r24, 0x04	; 4
    1448:	08 f0       	brcs	.+2      	; 0x144c <RTC_updateDate+0x2a>
    144a:	b5 c0       	rjmp	.+362    	; 0x15b6 <RTC_updateDate+0x194>
	   goto DATE_ERROR;
	   
	date[0]= data;
    144c:	10 93 12 01 	sts	0x0112, r17
	 
	data = receiveByte();
    1450:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
    1454:	18 2f       	mov	r17, r24
	transmitByte(data);
    1456:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
	if(data < 0x30 || data > 0x39)
    145a:	81 2f       	mov	r24, r17
    145c:	80 53       	subi	r24, 0x30	; 48
    145e:	8a 30       	cpi	r24, 0x0A	; 10
    1460:	08 f0       	brcs	.+2      	; 0x1464 <RTC_updateDate+0x42>
    1462:	a9 c0       	rjmp	.+338    	; 0x15b6 <RTC_updateDate+0x194>
	   goto DATE_ERROR;
	   
	date[1]= data;
    1464:	10 93 13 01 	sts	0x0113, r17
	
	if(((time[8] & 0x0f) + ((time[9] & 0x03)*10)) > 31)
    1468:	80 91 10 01 	lds	r24, 0x0110
    146c:	90 e0       	ldi	r25, 0x00	; 0
    146e:	83 70       	andi	r24, 0x03	; 3
    1470:	90 70       	andi	r25, 0x00	; 0
    1472:	9c 01       	movw	r18, r24
    1474:	22 0f       	add	r18, r18
    1476:	33 1f       	adc	r19, r19
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	88 0f       	add	r24, r24
    1482:	99 1f       	adc	r25, r25
    1484:	82 0f       	add	r24, r18
    1486:	93 1f       	adc	r25, r19
    1488:	20 91 0f 01 	lds	r18, 0x010F
    148c:	2f 70       	andi	r18, 0x0F	; 15
    148e:	82 0f       	add	r24, r18
    1490:	91 1d       	adc	r25, r1
    1492:	80 32       	cpi	r24, 0x20	; 32
    1494:	91 05       	cpc	r25, r1
    1496:	0c f0       	brlt	.+2      	; 0x149a <RTC_updateDate+0x78>
    1498:	8e c0       	rjmp	.+284    	; 0x15b6 <RTC_updateDate+0x194>
	   goto DATE_ERROR;
	
	data = receiveByte();  			   			  //receive special char (/,-, etc.)
    149a:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
    149e:	18 2f       	mov	r17, r24
	transmitByte(data);
    14a0:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
	if(data != '/' && data != '-' && data != ' ')
    14a4:	1f 32       	cpi	r17, 0x2F	; 47
    14a6:	29 f0       	breq	.+10     	; 0x14b2 <RTC_updateDate+0x90>
    14a8:	1d 32       	cpi	r17, 0x2D	; 45
    14aa:	19 f0       	breq	.+6      	; 0x14b2 <RTC_updateDate+0x90>
    14ac:	10 32       	cpi	r17, 0x20	; 32
    14ae:	09 f0       	breq	.+2      	; 0x14b2 <RTC_updateDate+0x90>
    14b0:	82 c0       	rjmp	.+260    	; 0x15b6 <RTC_updateDate+0x194>
	   goto DATE_ERROR;
	date[2] = data;
    14b2:	10 93 14 01 	sts	0x0114, r17
	   
	
	 data = receiveByte();			   			  //receive month
    14b6:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
    14ba:	18 2f       	mov	r17, r24
	 transmitByte(data);
    14bc:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
	if(data < 0x30 || data > 0x31)
    14c0:	81 2f       	mov	r24, r17
    14c2:	80 53       	subi	r24, 0x30	; 48
    14c4:	82 30       	cpi	r24, 0x02	; 2
    14c6:	08 f0       	brcs	.+2      	; 0x14ca <RTC_updateDate+0xa8>
    14c8:	76 c0       	rjmp	.+236    	; 0x15b6 <RTC_updateDate+0x194>
	  goto DATE_ERROR;
	  
	date[3]= data; 
    14ca:	10 93 15 01 	sts	0x0115, r17
	
	data = receiveByte();
    14ce:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
    14d2:	18 2f       	mov	r17, r24
	transmitByte(data);
    14d4:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
	if(data < 0x30 || data > 0x39)
    14d8:	81 2f       	mov	r24, r17
    14da:	80 53       	subi	r24, 0x30	; 48
    14dc:	8a 30       	cpi	r24, 0x0A	; 10
    14de:	08 f0       	brcs	.+2      	; 0x14e2 <RTC_updateDate+0xc0>
    14e0:	6a c0       	rjmp	.+212    	; 0x15b6 <RTC_updateDate+0x194>
	  goto DATE_ERROR;
	  
	date[4] = data; 
    14e2:	10 93 16 01 	sts	0x0116, r17
	
	if(((date[4] & 0x0f) + ((date[3] & 0x03)*10)) > 12)
    14e6:	1f 70       	andi	r17, 0x0F	; 15
    14e8:	80 91 15 01 	lds	r24, 0x0115
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	83 70       	andi	r24, 0x03	; 3
    14f0:	90 70       	andi	r25, 0x00	; 0
    14f2:	9c 01       	movw	r18, r24
    14f4:	22 0f       	add	r18, r18
    14f6:	33 1f       	adc	r19, r19
    14f8:	88 0f       	add	r24, r24
    14fa:	99 1f       	adc	r25, r25
    14fc:	88 0f       	add	r24, r24
    14fe:	99 1f       	adc	r25, r25
    1500:	88 0f       	add	r24, r24
    1502:	99 1f       	adc	r25, r25
    1504:	82 0f       	add	r24, r18
    1506:	93 1f       	adc	r25, r19
    1508:	81 0f       	add	r24, r17
    150a:	91 1d       	adc	r25, r1
    150c:	8d 30       	cpi	r24, 0x0D	; 13
    150e:	91 05       	cpc	r25, r1
    1510:	0c f0       	brlt	.+2      	; 0x1514 <RTC_updateDate+0xf2>
    1512:	51 c0       	rjmp	.+162    	; 0x15b6 <RTC_updateDate+0x194>
	   goto DATE_ERROR;
	   
	data = receiveByte();  			   			  //receive special char (/,-, etc.)
    1514:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
    1518:	18 2f       	mov	r17, r24
	transmitByte(data);
    151a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
	if(data != '/' && data != '-' && data != ' ')
    151e:	1f 32       	cpi	r17, 0x2F	; 47
    1520:	29 f0       	breq	.+10     	; 0x152c <RTC_updateDate+0x10a>
    1522:	1d 32       	cpi	r17, 0x2D	; 45
    1524:	19 f0       	breq	.+6      	; 0x152c <RTC_updateDate+0x10a>
    1526:	10 32       	cpi	r17, 0x20	; 32
    1528:	09 f0       	breq	.+2      	; 0x152c <RTC_updateDate+0x10a>
    152a:	45 c0       	rjmp	.+138    	; 0x15b6 <RTC_updateDate+0x194>
	   goto DATE_ERROR;
	date[5] = data;
    152c:	10 93 17 01 	sts	0x0117, r17
	
	date[6] = '2'; 	   	   	  	  //year is 20xx
    1530:	82 e3       	ldi	r24, 0x32	; 50
    1532:	80 93 18 01 	sts	0x0118, r24
	date[7] = '0';
    1536:	80 e3       	ldi	r24, 0x30	; 48
    1538:	80 93 19 01 	sts	0x0119, r24
	
	data = receiveByte();			   			  //receive seconds
    153c:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
    1540:	18 2f       	mov	r17, r24
	transmitByte(data);
    1542:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
	if(data < 0x30 || data > 0x39)
    1546:	81 2f       	mov	r24, r17
    1548:	80 53       	subi	r24, 0x30	; 48
    154a:	8a 30       	cpi	r24, 0x0A	; 10
    154c:	a0 f5       	brcc	.+104    	; 0x15b6 <RTC_updateDate+0x194>
	   goto DATE_ERROR;
	   
	date[8]= data; 
    154e:	10 93 1a 01 	sts	0x011A, r17
	
	data = receiveByte();
    1552:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
    1556:	18 2f       	mov	r17, r24
	transmitByte(data);
    1558:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
	if(data < 0x30 || data > 0x39)
    155c:	81 2f       	mov	r24, r17
    155e:	80 53       	subi	r24, 0x30	; 48
    1560:	8a 30       	cpi	r24, 0x0A	; 10
    1562:	48 f5       	brcc	.+82     	; 0x15b6 <RTC_updateDate+0x194>
	   goto DATE_ERROR;
	   
	date[9]= data; 
    1564:	10 93 1b 01 	sts	0x011B, r17
	
	TX_NEWLINE;
    1568:	8d e0       	ldi	r24, 0x0D	; 13
    156a:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
    156e:	8a e0       	ldi	r24, 0x0A	; 10
    1570:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
    transmitString_F(PSTR("Enter Day (Sunday:0, Monday:1...) (0-6):")); 
    1574:	88 e2       	ldi	r24, 0x28	; 40
    1576:	94 e0       	ldi	r25, 0x04	; 4
    1578:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
	
	data = receiveByte();				   //receive Day of the week
    157c:	0e 94 f3 0a 	call	0x15e6	; 0x15e6 <receiveByte>
    1580:	18 2f       	mov	r17, r24
	transmitByte(data);
    1582:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
	if(data < 0x30 || data > 0x36)
    1586:	81 2f       	mov	r24, r17
    1588:	80 53       	subi	r24, 0x30	; 48
    158a:	87 30       	cpi	r24, 0x07	; 7
    158c:	a0 f4       	brcc	.+40     	; 0x15b6 <RTC_updateDate+0x194>
	   goto DATE_ERROR;
	   
	date[10] = data & 0x0f;
    158e:	1f 70       	andi	r17, 0x0F	; 15
    1590:	10 93 1c 01 	sts	0x011C, r17
		 	  
  RTC_updateRegisters(); 
    1594:	0e 94 98 08 	call	0x1130	; 0x1130 <RTC_updateRegisters>
  data = RTC_writeDate();
    1598:	0e 94 3f 09 	call	0x127e	; 0x127e <RTC_writeDate>
  
  if(data == 0)
    159c:	88 23       	and	r24, r24
    159e:	a9 f4       	brne	.+42     	; 0x15ca <RTC_updateDate+0x1a8>
  {
     TX_NEWLINE;
    15a0:	8d e0       	ldi	r24, 0x0D	; 13
    15a2:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
    15a6:	8a e0       	ldi	r24, 0x0A	; 10
    15a8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
  	 transmitString_F(PSTR("Date Updated sucessfully..")); 
    15ac:	8d e0       	ldi	r24, 0x0D	; 13
    15ae:	94 e0       	ldi	r25, 0x04	; 4
    15b0:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
    15b4:	0a c0       	rjmp	.+20     	; 0x15ca <RTC_updateDate+0x1a8>
  }	  
  return;
  
DATE_ERROR:

  TX_NEWLINE;
    15b6:	8d e0       	ldi	r24, 0x0D	; 13
    15b8:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
    15bc:	8a e0       	ldi	r24, 0x0A	; 10
    15be:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
  transmitString_F(PSTR("Invalid Entry..")); 
    15c2:	8d ef       	ldi	r24, 0xFD	; 253
    15c4:	93 e0       	ldi	r25, 0x03	; 3
    15c6:	0e 94 fc 0a 	call	0x15f8	; 0x15f8 <transmitString_F>
  return;
}  
    15ca:	1f 91       	pop	r17
    15cc:	08 95       	ret

000015ce <uart0_init>:
//char size: 8 bit
//parity: Disabled
//**************************************************
void uart0_init(void)
{
 UCSR0B = 0x00; //disable while setting baud rate
    15ce:	1a b8       	out	0x0a, r1	; 10
 UCSR0A = 0x00;
    15d0:	1b b8       	out	0x0b, r1	; 11
 UCSR0C = 0x06;
    15d2:	86 e0       	ldi	r24, 0x06	; 6
    15d4:	80 93 95 00 	sts	0x0095, r24
 UBRR0L = 0x33; //set baud rate lo
    15d8:	83 e3       	ldi	r24, 0x33	; 51
    15da:	89 b9       	out	0x09, r24	; 9
 UBRR0H = 0x00; //set baud rate hi
    15dc:	10 92 90 00 	sts	0x0090, r1
 UCSR0B = 0x98;
    15e0:	88 e9       	ldi	r24, 0x98	; 152
    15e2:	8a b9       	out	0x0a, r24	; 10
}
    15e4:	08 95       	ret

000015e6 <receiveByte>:
//*************************************************
unsigned char receiveByte( void )
{
	unsigned char data, status;
	
	while(!(UCSR0A & (1<<RXC0))); 	// Wait for incomming data
    15e6:	5f 9b       	sbis	0x0b, 7	; 11
    15e8:	fe cf       	rjmp	.-4      	; 0x15e6 <receiveByte>
	
	status = UCSR0A;
    15ea:	8b b1       	in	r24, 0x0b	; 11
	data = UDR0;
    15ec:	8c b1       	in	r24, 0x0c	; 12
		   
	return(data);
}
    15ee:	08 95       	ret

000015f0 <transmitByte>:
//***************************************************
//Function to transmit a single byte
//***************************************************
void transmitByte( unsigned char data )
{
	while ( !(UCSR0A & (1<<UDRE0)) )
    15f0:	5d 9b       	sbis	0x0b, 5	; 11
    15f2:	fe cf       	rjmp	.-4      	; 0x15f0 <transmitByte>
		; 			                /* Wait for empty transmit buffer */
	UDR0 = data; 			        /* Start transmition */
    15f4:	8c b9       	out	0x0c, r24	; 12
}
    15f6:	08 95       	ret

000015f8 <transmitString_F>:

//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
    15f8:	cf 93       	push	r28
    15fa:	df 93       	push	r29
    15fc:	ec 01       	movw	r28, r24
  while (pgm_read_byte(&(*string)))
    15fe:	fe 01       	movw	r30, r28
    1600:	24 91       	lpm	r18, Z+
    1602:	22 23       	and	r18, r18
    1604:	51 f0       	breq	.+20     	; 0x161a <transmitString_F+0x22>
   transmitByte(pgm_read_byte(&(*string++)));
    1606:	21 96       	adiw	r28, 0x01	; 1
    1608:	fc 01       	movw	r30, r24
    160a:	84 91       	lpm	r24, Z+
    160c:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
    1610:	ce 01       	movw	r24, r28
//***************************************************
//Function to transmit a string in Flash
//***************************************************
void transmitString_F(char* string)
{
  while (pgm_read_byte(&(*string)))
    1612:	fe 01       	movw	r30, r28
    1614:	24 91       	lpm	r18, Z+
    1616:	22 23       	and	r18, r18
    1618:	b1 f7       	brne	.-20     	; 0x1606 <transmitString_F+0xe>
   transmitByte(pgm_read_byte(&(*string++)));
}
    161a:	df 91       	pop	r29
    161c:	cf 91       	pop	r28
    161e:	08 95       	ret

00001620 <transmitString>:

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(char* string)
{
    1620:	cf 93       	push	r28
    1622:	df 93       	push	r29
    1624:	ec 01       	movw	r28, r24
    while (*string)
    1626:	88 81       	ld	r24, Y
    1628:	88 23       	and	r24, r24
    162a:	31 f0       	breq	.+12     	; 0x1638 <transmitString+0x18>
}

//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(char* string)
    162c:	21 96       	adiw	r28, 0x01	; 1
{
    while (*string)
		transmitByte(*string++);
    162e:	0e 94 f8 0a 	call	0x15f0	; 0x15f0 <transmitByte>
//***************************************************
//Function to transmit a string in RAM
//***************************************************
void transmitString(char* string)
{
    while (*string)
    1632:	89 91       	ld	r24, Y+
    1634:	88 23       	and	r24, r24
    1636:	d9 f7       	brne	.-10     	; 0x162e <transmitString+0xe>
		transmitByte(*string++);
}
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	08 95       	ret

0000163e <_exit>:
    163e:	f8 94       	cli

00001640 <__stop_program>:
    1640:	ff cf       	rjmp	.-2      	; 0x1640 <__stop_program>
